(function(e){function t(t){for(var r,i,a=t[0],c=t[1],u=t[2],l=0,f=[];l<a.length;l++)i=a[l],Object.prototype.hasOwnProperty.call(o,i)&&o[i]&&f.push(o[i][0]),o[i]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);m&&m(t);while(f.length)f.shift()();return s.push.apply(s,u||[]),n()}function n(){for(var e,t=0;t<s.length;t++){for(var n=s[t],r=!0,i=1;i<n.length;i++){var a=n[i];0!==o[a]&&(r=!1)}r&&(s.splice(t--,1),e=c(c.s=n[0]))}return e}var r={},i={app:0},o={app:0},s=[];function a(e){return c.p+"js/"+({ast:"ast"}[e]||e)+"."+{ast:"15a2cf31"}[e]+".js"}function c(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,c),n.l=!0,n.exports}c.e=function(e){var t=[],n={ast:1};i[e]?t.push(i[e]):0!==i[e]&&n[e]&&t.push(i[e]=new Promise((function(t,n){for(var r="css/"+({ast:"ast"}[e]||e)+"."+{ast:"477be0e0"}[e]+".css",o=c.p+r,s=document.getElementsByTagName("link"),a=0;a<s.length;a++){var u=s[a],l=u.getAttribute("data-href")||u.getAttribute("href");if("stylesheet"===u.rel&&(l===r||l===o))return t()}var f=document.getElementsByTagName("style");for(a=0;a<f.length;a++){u=f[a],l=u.getAttribute("data-href");if(l===r||l===o)return t()}var m=document.createElement("link");m.rel="stylesheet",m.type="text/css",m.onload=t,m.onerror=function(t){var r=t&&t.target&&t.target.src||o,s=new Error("Loading CSS chunk "+e+" failed.\n("+r+")");s.code="CSS_CHUNK_LOAD_FAILED",s.request=r,delete i[e],m.parentNode.removeChild(m),n(s)},m.href=o;var d=document.getElementsByTagName("head")[0];d.appendChild(m)})).then((function(){i[e]=0})));var r=o[e];if(0!==r)if(r)t.push(r[2]);else{var s=new Promise((function(t,n){r=o[e]=[t,n]}));t.push(r[2]=s);var u,l=document.createElement("script");l.charset="utf-8",l.timeout=120,c.nc&&l.setAttribute("nonce",c.nc),l.src=a(e);var f=new Error;u=function(t){l.onerror=l.onload=null,clearTimeout(m);var n=o[e];if(0!==n){if(n){var r=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src;f.message="Loading chunk "+e+" failed.\n("+r+": "+i+")",f.name="ChunkLoadError",f.type=r,f.request=i,n[1](f)}o[e]=void 0}};var m=setTimeout((function(){u({type:"timeout",target:l})}),12e4);l.onerror=l.onload=u,document.head.appendChild(l)}return Promise.all(t)},c.m=e,c.c=r,c.d=function(e,t,n){c.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},c.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},c.t=function(e,t){if(1&t&&(e=c(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(c.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)c.d(n,r,function(t){return e[t]}.bind(null,r));return n},c.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return c.d(t,"a",t),t},c.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},c.p="/",c.oe=function(e){throw console.error(e),e};var u=window["webpackJsonp"]=window["webpackJsonp"]||[],l=u.push.bind(u);u.push=t,u=u.slice();for(var f=0;f<u.length;f++)t(u[f]);var m=l;s.push([0,"chunk-vendors"]),n()})({0:function(e,t,n){e.exports=n("56d7")},"034f":function(e,t,n){"use strict";n("64a9")},"07dd":function(e,t,n){"use strict";(function(e,t,r){n("55dd"),n("f3e2"),n("6c7b"),n("96cf");var i=n("3b8d"),o=(n("6aa2"),n("2397"),n("df1b"),n("ba16"),n("9253"),n("d185"),n("78ce"),n("262f"),n("34ef"),n("5df3"),n("f400"),n("d225")),s=n("b0b4"),a=n("768b"),c=(n("9865"),n("ac6a"),n("456d"),n("7618"));(function(){if("undefined"!==typeof e);else if("undefined"!==typeof window)window.global=window;else{if("undefined"===typeof self)throw new Error("cannot export Go (neither global, window nor self is defined)");self.global=self}if(e.require||(e.require=n("4fe4")),!e.fs&&e.require){var u=n("3e8f");"object"===Object(c["a"])(u)&&null!==u&&0!==Object.keys(u).length&&(e.fs=u)}var l=function(){var e=new Error("not implemented");return e.code="ENOSYS",e};if(!e.fs){var f="";e.fs={constants:{O_WRONLY:-1,O_RDWR:-1,O_CREAT:-1,O_TRUNC:-1,O_APPEND:-1,O_EXCL:-1},writeSync:function(e,t){f+=p.decode(t);var n=f.lastIndexOf("\n");return-1!=n&&(console.log(f.substr(0,n)),f=f.substr(n+1)),t.length},write:function(e,t,n,r,i,o){if(0===n&&r===t.length&&null===i){var s=this.writeSync(e,t);o(null,s)}else o(l())},chmod:function(e,t,n){n(l())},chown:function(e,t,n,r){r(l())},close:function(e,t){t(l())},fchmod:function(e,t,n){n(l())},fchown:function(e,t,n,r){r(l())},fstat:function(e,t){t(l())},fsync:function(e,t){t(null)},ftruncate:function(e,t,n){n(l())},lchown:function(e,t,n,r){r(l())},link:function(e,t,n){n(l())},lstat:function(e,t){t(l())},mkdir:function(e,t,n){n(l())},open:function(e,t,n,r){r(l())},read:function(e,t,n,r,i,o){o(l())},readdir:function(e,t){t(l())},readlink:function(e,t){t(l())},rename:function(e,t,n){n(l())},rmdir:function(e,t){t(l())},stat:function(e,t){t(l())},symlink:function(e,t,n){n(l())},truncate:function(e,t,n){n(l())},unlink:function(e,t){t(l())},utimes:function(e,t,n,r){r(l())}}}if(e.process||(e.process={getuid:function(){return-1},getgid:function(){return-1},geteuid:function(){return-1},getegid:function(){return-1},getgroups:function(){throw l()},pid:-1,ppid:-1,umask:function(){throw l()},cwd:function(){throw l()},chdir:function(){throw l()}}),!e.crypto&&e.require){var m=n("1c46");e.crypto={getRandomValues:function(e){m.randomFillSync(e)}}}if(!e.crypto)throw new Error("global.crypto is not available, polyfill required (getRandomValues only)");if(e.performance||(e.performance={now:function(){var e=t.hrtime(),n=Object(a["a"])(e,2),r=n[0],i=n[1];return 1e3*r+i/1e6}}),!e.TextEncoder&&e.require&&(e.TextEncoder=n("3022").TextEncoder),!e.TextEncoder)throw new Error("global.TextEncoder is not available, polyfill required");if(!e.TextDecoder&&e.require&&(e.TextDecoder=n("3022").TextDecoder),!e.TextDecoder)throw new Error("global.TextDecoder is not available, polyfill required");var d=new TextEncoder("utf-8"),p=new TextDecoder("utf-8");if(e.Go=function(){function t(){var e=this;Object(o["a"])(this,t),this.argv=["js"],this.env={},this.exit=function(e){0!==e&&console.warn("exit code:",e)},this._exitPromise=new Promise((function(t){e._resolveExitPromise=t})),this._pendingEvent=null,this._scheduledTimeouts=new Map,this._nextCallbackTimeoutID=1;var n=function(t,n){e.mem.setUint32(t+0,n,!0),e.mem.setUint32(t+4,Math.floor(n/4294967296),!0)},r=function(t){var n=e.mem.getUint32(t+0,!0),r=e.mem.getInt32(t+4,!0);return n+4294967296*r},i=function(t){var n=e.mem.getFloat64(t,!0);if(0!==n){if(!isNaN(n))return n;var r=e.mem.getUint32(t,!0);return e._values[r]}},s=function(t,n){var r=2146959360;if("number"===typeof n&&0!==n)return isNaN(n)?(e.mem.setUint32(t+4,r,!0),void e.mem.setUint32(t,0,!0)):void e.mem.setFloat64(t,n,!0);if(void 0!==n){var i=e._ids.get(n);void 0===i&&(i=e._idPool.pop(),void 0===i&&(i=e._values.length),e._values[i]=n,e._goRefCounts[i]=0,e._ids.set(n,i)),e._goRefCounts[i]++;var o=0;switch(Object(c["a"])(n)){case"object":null!==n&&(o=1);break;case"string":o=2;break;case"symbol":o=3;break;case"function":o=4;break}e.mem.setUint32(t+4,r|o,!0),e.mem.setUint32(t,i,!0)}else e.mem.setFloat64(t,0,!0)},a=function(t){var n=r(t+0),i=r(t+8);return new Uint8Array(e._inst.exports.mem.buffer,n,i)},u=function(e){for(var t=r(e+0),n=r(e+8),o=new Array(n),s=0;s<n;s++)o[s]=i(t+8*s);return o},l=function(t){var n=r(t+0),i=r(t+8);return p.decode(new DataView(e._inst.exports.mem.buffer,n,i))},f=Date.now()-performance.now();this.importObject={go:{"runtime.wasmExit":function(t){t>>>=0;var n=e.mem.getInt32(t+8,!0);e.exited=!0,delete e._inst,delete e._values,delete e._goRefCounts,delete e._ids,delete e._idPool,e.exit(n)},"runtime.wasmWrite":function(t){t>>>=0;var n=r(t+8),i=r(t+16),o=e.mem.getInt32(t+24,!0);fs.writeSync(n,new Uint8Array(e._inst.exports.mem.buffer,i,o))},"runtime.resetMemoryDataView":function(t){e.mem=new DataView(e._inst.exports.mem.buffer)},"runtime.nanotime1":function(e){e>>>=0,n(e+8,1e6*(f+performance.now()))},"runtime.walltime":function(t){t>>>=0;var r=(new Date).getTime();n(t+8,r/1e3),e.mem.setInt32(t+16,r%1e3*1e6,!0)},"runtime.scheduleTimeoutEvent":function(t){t>>>=0;var n=e._nextCallbackTimeoutID;e._nextCallbackTimeoutID++,e._scheduledTimeouts.set(n,setTimeout((function(){e._resume();while(e._scheduledTimeouts.has(n))console.warn("scheduleTimeoutEvent: missed timeout event"),e._resume()}),r(t+8)+1)),e.mem.setInt32(t+16,n,!0)},"runtime.clearTimeoutEvent":function(t){t>>>=0;var n=e.mem.getInt32(t+8,!0);clearTimeout(e._scheduledTimeouts.get(n)),e._scheduledTimeouts.delete(n)},"runtime.getRandomData":function(e){e>>>=0,crypto.getRandomValues(a(e+8))},"syscall/js.finalizeRef":function(t){t>>>=0;var n=e.mem.getUint32(t+8,!0);if(e._goRefCounts[n]--,0===e._goRefCounts[n]){var r=e._values[n];e._values[n]=null,e._ids.delete(r),e._idPool.push(n)}},"syscall/js.stringVal":function(e){e>>>=0,s(e+24,l(e+8))},"syscall/js.valueGet":function(t){t>>>=0;var n=Reflect.get(i(t+8),l(t+16));t=e._inst.exports.getsp()>>>0,s(t+32,n)},"syscall/js.valueSet":function(e){e>>>=0,Reflect.set(i(e+8),l(e+16),i(e+32))},"syscall/js.valueDelete":function(e){e>>>=0,Reflect.deleteProperty(i(e+8),l(e+16))},"syscall/js.valueIndex":function(e){e>>>=0,s(e+24,Reflect.get(i(e+8),r(e+16)))},"syscall/js.valueSetIndex":function(e){e>>>=0,Reflect.set(i(e+8),r(e+16),i(e+24))},"syscall/js.valueCall":function(t){t>>>=0;try{var n=i(t+8),r=Reflect.get(n,l(t+16)),o=u(t+32),a=Reflect.apply(r,n,o);t=e._inst.exports.getsp()>>>0,s(t+56,a),e.mem.setUint8(t+64,1)}catch(c){t=e._inst.exports.getsp()>>>0,s(t+56,c),e.mem.setUint8(t+64,0)}},"syscall/js.valueInvoke":function(t){t>>>=0;try{var n=i(t+8),r=u(t+16),o=Reflect.apply(n,void 0,r);t=e._inst.exports.getsp()>>>0,s(t+40,o),e.mem.setUint8(t+48,1)}catch(a){t=e._inst.exports.getsp()>>>0,s(t+40,a),e.mem.setUint8(t+48,0)}},"syscall/js.valueNew":function(t){t>>>=0;try{var n=i(t+8),r=u(t+16),o=Reflect.construct(n,r);t=e._inst.exports.getsp()>>>0,s(t+40,o),e.mem.setUint8(t+48,1)}catch(a){t=e._inst.exports.getsp()>>>0,s(t+40,a),e.mem.setUint8(t+48,0)}},"syscall/js.valueLength":function(e){e>>>=0,n(e+16,parseInt(i(e+8).length))},"syscall/js.valuePrepareString":function(e){e>>>=0;var t=d.encode(String(i(e+8)));s(e+16,t),n(e+24,t.length)},"syscall/js.valueLoadString":function(e){e>>>=0;var t=i(e+8);a(e+16).set(t)},"syscall/js.valueInstanceOf":function(t){t>>>=0,e.mem.setUint8(t+24,i(t+8)instanceof i(t+16)?1:0)},"syscall/js.copyBytesToGo":function(t){t>>>=0;var r=a(t+8),o=i(t+32);if(o instanceof Uint8Array||o instanceof Uint8ClampedArray){var s=o.subarray(0,r.length);r.set(s),n(t+40,s.length),e.mem.setUint8(t+48,1)}else e.mem.setUint8(t+48,0)},"syscall/js.copyBytesToJS":function(t){t>>>=0;var r=i(t+8),o=a(t+16);if(r instanceof Uint8Array||r instanceof Uint8ClampedArray){var s=o.subarray(0,r.length);r.set(s),n(t+40,s.length),e.mem.setUint8(t+48,1)}else e.mem.setUint8(t+48,0)},debug:function(e){console.log(e)}}}}return Object(s["a"])(t,[{key:"run",value:function(){var t=Object(i["a"])(regeneratorRuntime.mark((function t(n){var r,i,o,s,a,c,u,l=this;return regeneratorRuntime.wrap((function(t){while(1)switch(t.prev=t.next){case 0:if(n instanceof WebAssembly.Instance){t.next=2;break}throw new Error("Go.run: WebAssembly.Instance expected");case 2:if(this._inst=n,this.mem=new DataView(this._inst.exports.mem.buffer),this._values=[NaN,0,null,!0,!1,e,this],this._goRefCounts=new Array(this._values.length).fill(1/0),this._ids=new Map([[0,1],[null,2],[!0,3],[!1,4],[e,5],[this,6]]),this._idPool=[],this.exited=!1,r=4096,i=function(e){var t=r,n=d.encode(e+"\0");return new Uint8Array(l.mem.buffer,r,n.length).set(n),r+=n.length,r%8!==0&&(r+=8-r%8),t},o=this.argv.length,s=[],this.argv.forEach((function(e){s.push(i(e))})),s.push(0),a=Object.keys(this.env).sort(),a.forEach((function(e){s.push(i("".concat(e,"=").concat(l.env[e])))})),s.push(0),c=r,s.forEach((function(e){l.mem.setUint32(r,e,!0),l.mem.setUint32(r+4,0,!0),r+=8})),u=12288,!(r>=u)){t.next=23;break}throw new Error("total length of command line and environment variables exceeds limit");case 23:return this._inst.exports.run(o,c),this.exited&&this._resolveExitPromise(),t.next=27,this._exitPromise;case 27:case"end":return t.stop()}}),t,this)})));function n(e){return t.apply(this,arguments)}return n}()},{key:"_resume",value:function(){if(this.exited)throw new Error("Go program has already exited");this._inst.exports.resume(),this.exited&&this._resolveExitPromise()}},{key:"_makeFuncWrapper",value:function(e){var t=this;return function(){var n={id:e,this:this,args:arguments};return t._pendingEvent=n,t._resume(),n.result}}}]),t}(),e.require&&e.require.main===r&&e.process&&e.process.versions&&!e.process.versions.electron){t.argv.length<3&&(console.error("usage: go_js_wasm_exec [wasm binary] [arguments]"),t.exit(1));var h=new Go;h.argv=t.argv.slice(2),h.env=Object.assign({TMPDIR:n("3c43").tmpdir()},Object({NODE_ENV:"production",BASE_URL:"/"})),h.exit=t.exit,WebAssembly.instantiate(fs.readFileSync(t.argv[2]),h.importObject).then((function(e){return t.on("exit",(function(e){0!==e||h.exited||(h._pendingEvent={id:0},h._resume())})),h.run(e.instance)})).catch((function(e){console.error(e),t.exit(1)}))}})()}).call(this,n("c8ba"),n("f28c"),n("dd40")(e))},1:function(e,t){},10:function(e,t){},11:function(e,t){},12:function(e,t){},13:function(e,t){},14:function(e,t){},2:function(e,t){},2364:function(e,t){e.exports=monaco},3:function(e,t){},4:function(e,t){},"4fe4":function(e,t){function n(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}n.keys=function(){return[]},n.resolve=n,e.exports=n,n.id="4fe4"},5:function(e,t){},"56d7":function(e,t,n){"use strict";n.r(t);n("96cf");var r=n("3b8d"),i=(n("cadf"),n("551c"),n("f751"),n("097d"),n("2b0e")),o=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"app"}},[e._m(0),n("router-view")],1)},s=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"nav"}},[n("div",{attrs:{id:"title"}},[n("a",{attrs:{href:"https://github.com/hsiaosiyuan0/mole",target:"_blank"}},[e._v("mole")])]),n("div",{staticClass:"desc"},[e._v("\n      Paste your JavaScript source in left panel and see its AST in right panel. The parser is written in golang and as a sub-module in mole, running in this page via construct it into WASM\n    ")])])}],a=(n("034f"),n("2877")),c={},u=Object(a["a"])(c,o,s,!1,null,null,null),l=u.exports,f=n("8c4f");i["a"].use(f["a"]);var m=new f["a"]({routes:[{path:"/",redirect:"/ast"},{path:"/ast",name:"ast",component:function(){return n.e("ast").then(n.bind(null,"ad5f"))}}]}),d=n("2f62");i["a"].use(d["a"]);var p=new d["a"].Store({state:{},mutations:{},actions:{}});n("07dd");i["a"].config.productionTip=!1,window.require.config({paths:{vs:"https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.17.0/min/vs"}}),window.MonacoEnvironment={getWorkerUrl:function(e,t){return"data:text/javascript;charset=utf-8,".concat(encodeURIComponent("\n  self.MonacoEnvironment = {\n    baseUrl: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.17.0/min/'\n  };\n  importScripts('https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.17.0/min/vs/base/worker/workerMain.js');"))}},window.require(["vs/editor/editor.main"],(function(){new i["a"]({router:m,store:p,render:function(e){return e(l)}}).$mount("#app")})),Object(r["a"])(regeneratorRuntime.mark((function e(){var t,n,r,i,o;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return t=new Go,e.next=3,fetch("https://blog.thehardways.me/mole-is-more/src/assets/mole.wasm");case 3:return n=e.sent,e.next=6,n.arrayBuffer();case 6:return r=e.sent,e.next=9,WebAssembly.compile(r);case 9:return i=e.sent,e.next=12,WebAssembly.instantiate(i,t.importObject);case 12:o=e.sent,t.run(o);case 14:case"end":return e.stop()}}),e)})))()},6:function(e,t){},"64a9":function(e,t,n){},7:function(e,t){},8:function(e,t){},9:function(e,t){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,