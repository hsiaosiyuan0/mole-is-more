(function(e){function t(t){for(var r,o,a=t[0],c=t[1],u=t[2],l=0,f=[];l<a.length;l++)o=a[l],Object.prototype.hasOwnProperty.call(i,o)&&i[o]&&f.push(i[o][0]),i[o]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);d&&d(t);while(f.length)f.shift()();return s.push.apply(s,u||[]),n()}function n(){for(var e,t=0;t<s.length;t++){for(var n=s[t],r=!0,o=1;o<n.length;o++){var a=n[o];0!==i[a]&&(r=!1)}r&&(s.splice(t--,1),e=c(c.s=n[0]))}return e}var r={},o={app:0},i={app:0},s=[];function a(e){return c.p+"js/"+({ast:"ast"}[e]||e)+"."+{ast:"c7f74c45"}[e]+".js"}function c(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,c),n.l=!0,n.exports}c.e=function(e){var t=[],n={ast:1};o[e]?t.push(o[e]):0!==o[e]&&n[e]&&t.push(o[e]=new Promise((function(t,n){for(var r="css/"+({ast:"ast"}[e]||e)+"."+{ast:"b9e085eb"}[e]+".css",i=c.p+r,s=document.getElementsByTagName("link"),a=0;a<s.length;a++){var u=s[a],l=u.getAttribute("data-href")||u.getAttribute("href");if("stylesheet"===u.rel&&(l===r||l===i))return t()}var f=document.getElementsByTagName("style");for(a=0;a<f.length;a++){u=f[a],l=u.getAttribute("data-href");if(l===r||l===i)return t()}var d=document.createElement("link");d.rel="stylesheet",d.type="text/css",d.onload=t,d.onerror=function(t){var r=t&&t.target&&t.target.src||i,s=new Error("Loading CSS chunk "+e+" failed.\n("+r+")");s.code="CSS_CHUNK_LOAD_FAILED",s.request=r,delete o[e],d.parentNode.removeChild(d),n(s)},d.href=i;var m=document.getElementsByTagName("head")[0];m.appendChild(d)})).then((function(){o[e]=0})));var r=i[e];if(0!==r)if(r)t.push(r[2]);else{var s=new Promise((function(t,n){r=i[e]=[t,n]}));t.push(r[2]=s);var u,l=document.createElement("script");l.charset="utf-8",l.timeout=120,c.nc&&l.setAttribute("nonce",c.nc),l.src=a(e);var f=new Error;u=function(t){l.onerror=l.onload=null,clearTimeout(d);var n=i[e];if(0!==n){if(n){var r=t&&("load"===t.type?"missing":t.type),o=t&&t.target&&t.target.src;f.message="Loading chunk "+e+" failed.\n("+r+": "+o+")",f.name="ChunkLoadError",f.type=r,f.request=o,n[1](f)}i[e]=void 0}};var d=setTimeout((function(){u({type:"timeout",target:l})}),12e4);l.onerror=l.onload=u,document.head.appendChild(l)}return Promise.all(t)},c.m=e,c.c=r,c.d=function(e,t,n){c.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},c.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},c.t=function(e,t){if(1&t&&(e=c(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(c.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)c.d(n,r,function(t){return e[t]}.bind(null,r));return n},c.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return c.d(t,"a",t),t},c.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},c.p="/mole-is-more/",c.oe=function(e){throw console.error(e),e};var u=window["webpackJsonp"]=window["webpackJsonp"]||[],l=u.push.bind(u);u.push=t,u=u.slice();for(var f=0;f<u.length;f++)t(u[f]);var d=l;s.push([0,"chunk-vendors"]),n()})({0:function(e,t,n){e.exports=n("56d7")},"034f":function(e,t,n){"use strict";n("64a9")},"07dd":function(e,t,n){"use strict";(function(e,t,r){n("55dd"),n("f3e2"),n("6c7b"),n("96cf");var o=n("3b8d"),i=(n("6aa2"),n("2397"),n("df1b"),n("ba16"),n("9253"),n("d185"),n("78ce"),n("262f"),n("34ef"),n("5df3"),n("f400"),n("d225")),s=n("b0b4"),a=n("768b"),c=(n("9865"),n("ac6a"),n("456d"),n("7618"));(function(){if("undefined"!==typeof e);else if("undefined"!==typeof window)window.global=window;else{if("undefined"===typeof self)throw new Error("cannot export Go (neither global, window nor self is defined)");self.global=self}if(e.require||(e.require=n("4fe4")),!e.fs&&e.require){var u=n("3e8f");"object"===Object(c["a"])(u)&&null!==u&&0!==Object.keys(u).length&&(e.fs=u)}var l=function(){var e=new Error("not implemented");return e.code="ENOSYS",e};if(!e.fs){var f="";e.fs={constants:{O_WRONLY:-1,O_RDWR:-1,O_CREAT:-1,O_TRUNC:-1,O_APPEND:-1,O_EXCL:-1},writeSync:function(e,t){f+=p.decode(t);var n=f.lastIndexOf("\n");return-1!=n&&(console.log(f.substr(0,n)),f=f.substr(n+1)),t.length},write:function(e,t,n,r,o,i){if(0===n&&r===t.length&&null===o){var s=this.writeSync(e,t);i(null,s)}else i(l())},chmod:function(e,t,n){n(l())},chown:function(e,t,n,r){r(l())},close:function(e,t){t(l())},fchmod:function(e,t,n){n(l())},fchown:function(e,t,n,r){r(l())},fstat:function(e,t){t(l())},fsync:function(e,t){t(null)},ftruncate:function(e,t,n){n(l())},lchown:function(e,t,n,r){r(l())},link:function(e,t,n){n(l())},lstat:function(e,t){t(l())},mkdir:function(e,t,n){n(l())},open:function(e,t,n,r){r(l())},read:function(e,t,n,r,o,i){i(l())},readdir:function(e,t){t(l())},readlink:function(e,t){t(l())},rename:function(e,t,n){n(l())},rmdir:function(e,t){t(l())},stat:function(e,t){t(l())},symlink:function(e,t,n){n(l())},truncate:function(e,t,n){n(l())},unlink:function(e,t){t(l())},utimes:function(e,t,n,r){r(l())}}}if(e.process||(e.process={getuid:function(){return-1},getgid:function(){return-1},geteuid:function(){return-1},getegid:function(){return-1},getgroups:function(){throw l()},pid:-1,ppid:-1,umask:function(){throw l()},cwd:function(){throw l()},chdir:function(){throw l()}}),!e.crypto&&e.require){var d=n("1c46");e.crypto={getRandomValues:function(e){d.randomFillSync(e)}}}if(!e.crypto)throw new Error("global.crypto is not available, polyfill required (getRandomValues only)");if(e.performance||(e.performance={now:function(){var e=t.hrtime(),n=Object(a["a"])(e,2),r=n[0],o=n[1];return 1e3*r+o/1e6}}),!e.TextEncoder&&e.require&&(e.TextEncoder=n("3022").TextEncoder),!e.TextEncoder)throw new Error("global.TextEncoder is not available, polyfill required");if(!e.TextDecoder&&e.require&&(e.TextDecoder=n("3022").TextDecoder),!e.TextDecoder)throw new Error("global.TextDecoder is not available, polyfill required");var m=new TextEncoder("utf-8"),p=new TextDecoder("utf-8");if(e.Go=function(){function t(){var e=this;Object(i["a"])(this,t),this.argv=["js"],this.env={},this.exit=function(e){0!==e&&console.warn("exit code:",e)},this._exitPromise=new Promise((function(t){e._resolveExitPromise=t})),this._pendingEvent=null,this._scheduledTimeouts=new Map,this._nextCallbackTimeoutID=1;var n=function(t,n){e.mem.setUint32(t+0,n,!0),e.mem.setUint32(t+4,Math.floor(n/4294967296),!0)},r=function(t){var n=e.mem.getUint32(t+0,!0),r=e.mem.getInt32(t+4,!0);return n+4294967296*r},o=function(t){var n=e.mem.getFloat64(t,!0);if(0!==n){if(!isNaN(n))return n;var r=e.mem.getUint32(t,!0);return e._values[r]}},s=function(t,n){var r=2146959360;if("number"===typeof n&&0!==n)return isNaN(n)?(e.mem.setUint32(t+4,r,!0),void e.mem.setUint32(t,0,!0)):void e.mem.setFloat64(t,n,!0);if(void 0!==n){var o=e._ids.get(n);void 0===o&&(o=e._idPool.pop(),void 0===o&&(o=e._values.length),e._values[o]=n,e._goRefCounts[o]=0,e._ids.set(n,o)),e._goRefCounts[o]++;var i=0;switch(Object(c["a"])(n)){case"object":null!==n&&(i=1);break;case"string":i=2;break;case"symbol":i=3;break;case"function":i=4;break}e.mem.setUint32(t+4,r|i,!0),e.mem.setUint32(t,o,!0)}else e.mem.setFloat64(t,0,!0)},a=function(t){var n=r(t+0),o=r(t+8);return new Uint8Array(e._inst.exports.mem.buffer,n,o)},u=function(e){for(var t=r(e+0),n=r(e+8),i=new Array(n),s=0;s<n;s++)i[s]=o(t+8*s);return i},l=function(t){var n=r(t+0),o=r(t+8);return p.decode(new DataView(e._inst.exports.mem.buffer,n,o))},f=Date.now()-performance.now();this.importObject={go:{"runtime.wasmExit":function(t){t>>>=0;var n=e.mem.getInt32(t+8,!0);e.exited=!0,delete e._inst,delete e._values,delete e._goRefCounts,delete e._ids,delete e._idPool,e.exit(n)},"runtime.wasmWrite":function(t){t>>>=0;var n=r(t+8),o=r(t+16),i=e.mem.getInt32(t+24,!0);fs.writeSync(n,new Uint8Array(e._inst.exports.mem.buffer,o,i))},"runtime.resetMemoryDataView":function(t){e.mem=new DataView(e._inst.exports.mem.buffer)},"runtime.nanotime1":function(e){e>>>=0,n(e+8,1e6*(f+performance.now()))},"runtime.walltime":function(t){t>>>=0;var r=(new Date).getTime();n(t+8,r/1e3),e.mem.setInt32(t+16,r%1e3*1e6,!0)},"runtime.scheduleTimeoutEvent":function(t){t>>>=0;var n=e._nextCallbackTimeoutID;e._nextCallbackTimeoutID++,e._scheduledTimeouts.set(n,setTimeout((function(){e._resume();while(e._scheduledTimeouts.has(n))console.warn("scheduleTimeoutEvent: missed timeout event"),e._resume()}),r(t+8)+1)),e.mem.setInt32(t+16,n,!0)},"runtime.clearTimeoutEvent":function(t){t>>>=0;var n=e.mem.getInt32(t+8,!0);clearTimeout(e._scheduledTimeouts.get(n)),e._scheduledTimeouts.delete(n)},"runtime.getRandomData":function(e){e>>>=0,crypto.getRandomValues(a(e+8))},"syscall/js.finalizeRef":function(t){t>>>=0;var n=e.mem.getUint32(t+8,!0);if(e._goRefCounts[n]--,0===e._goRefCounts[n]){var r=e._values[n];e._values[n]=null,e._ids.delete(r),e._idPool.push(n)}},"syscall/js.stringVal":function(e){e>>>=0,s(e+24,l(e+8))},"syscall/js.valueGet":function(t){t>>>=0;var n=Reflect.get(o(t+8),l(t+16));t=e._inst.exports.getsp()>>>0,s(t+32,n)},"syscall/js.valueSet":function(e){e>>>=0,Reflect.set(o(e+8),l(e+16),o(e+32))},"syscall/js.valueDelete":function(e){e>>>=0,Reflect.deleteProperty(o(e+8),l(e+16))},"syscall/js.valueIndex":function(e){e>>>=0,s(e+24,Reflect.get(o(e+8),r(e+16)))},"syscall/js.valueSetIndex":function(e){e>>>=0,Reflect.set(o(e+8),r(e+16),o(e+24))},"syscall/js.valueCall":function(t){t>>>=0;try{var n=o(t+8),r=Reflect.get(n,l(t+16)),i=u(t+32),a=Reflect.apply(r,n,i);t=e._inst.exports.getsp()>>>0,s(t+56,a),e.mem.setUint8(t+64,1)}catch(c){t=e._inst.exports.getsp()>>>0,s(t+56,c),e.mem.setUint8(t+64,0)}},"syscall/js.valueInvoke":function(t){t>>>=0;try{var n=o(t+8),r=u(t+16),i=Reflect.apply(n,void 0,r);t=e._inst.exports.getsp()>>>0,s(t+40,i),e.mem.setUint8(t+48,1)}catch(a){t=e._inst.exports.getsp()>>>0,s(t+40,a),e.mem.setUint8(t+48,0)}},"syscall/js.valueNew":function(t){t>>>=0;try{var n=o(t+8),r=u(t+16),i=Reflect.construct(n,r);t=e._inst.exports.getsp()>>>0,s(t+40,i),e.mem.setUint8(t+48,1)}catch(a){t=e._inst.exports.getsp()>>>0,s(t+40,a),e.mem.setUint8(t+48,0)}},"syscall/js.valueLength":function(e){e>>>=0,n(e+16,parseInt(o(e+8).length))},"syscall/js.valuePrepareString":function(e){e>>>=0;var t=m.encode(String(o(e+8)));s(e+16,t),n(e+24,t.length)},"syscall/js.valueLoadString":function(e){e>>>=0;var t=o(e+8);a(e+16).set(t)},"syscall/js.valueInstanceOf":function(t){t>>>=0,e.mem.setUint8(t+24,o(t+8)instanceof o(t+16)?1:0)},"syscall/js.copyBytesToGo":function(t){t>>>=0;var r=a(t+8),i=o(t+32);if(i instanceof Uint8Array||i instanceof Uint8ClampedArray){var s=i.subarray(0,r.length);r.set(s),n(t+40,s.length),e.mem.setUint8(t+48,1)}else e.mem.setUint8(t+48,0)},"syscall/js.copyBytesToJS":function(t){t>>>=0;var r=o(t+8),i=a(t+16);if(r instanceof Uint8Array||r instanceof Uint8ClampedArray){var s=i.subarray(0,r.length);r.set(s),n(t+40,s.length),e.mem.setUint8(t+48,1)}else e.mem.setUint8(t+48,0)},debug:function(e){console.log(e)}}}}return Object(s["a"])(t,[{key:"run",value:function(){var t=Object(o["a"])(regeneratorRuntime.mark((function t(n){var r,o,i,s,a,c,u,l=this;return regeneratorRuntime.wrap((function(t){while(1)switch(t.prev=t.next){case 0:if(n instanceof WebAssembly.Instance){t.next=2;break}throw new Error("Go.run: WebAssembly.Instance expected");case 2:if(this._inst=n,this.mem=new DataView(this._inst.exports.mem.buffer),this._values=[NaN,0,null,!0,!1,e,this],this._goRefCounts=new Array(this._values.length).fill(1/0),this._ids=new Map([[0,1],[null,2],[!0,3],[!1,4],[e,5],[this,6]]),this._idPool=[],this.exited=!1,r=4096,o=function(e){var t=r,n=m.encode(e+"\0");return new Uint8Array(l.mem.buffer,r,n.length).set(n),r+=n.length,r%8!==0&&(r+=8-r%8),t},i=this.argv.length,s=[],this.argv.forEach((function(e){s.push(o(e))})),s.push(0),a=Object.keys(this.env).sort(),a.forEach((function(e){s.push(o("".concat(e,"=").concat(l.env[e])))})),s.push(0),c=r,s.forEach((function(e){l.mem.setUint32(r,e,!0),l.mem.setUint32(r+4,0,!0),r+=8})),u=12288,!(r>=u)){t.next=23;break}throw new Error("total length of command line and environment variables exceeds limit");case 23:return this._inst.exports.run(i,c),this.exited&&this._resolveExitPromise(),t.next=27,this._exitPromise;case 27:case"end":return t.stop()}}),t,this)})));function n(e){return t.apply(this,arguments)}return n}()},{key:"_resume",value:function(){if(this.exited)throw new Error("Go program has already exited");this._inst.exports.resume(),this.exited&&this._resolveExitPromise()}},{key:"_makeFuncWrapper",value:function(e){var t=this;return function(){var n={id:e,this:this,args:arguments};return t._pendingEvent=n,t._resume(),n.result}}}]),t}(),e.require&&e.require.main===r&&e.process&&e.process.versions&&!e.process.versions.electron){t.argv.length<3&&(console.error("usage: go_js_wasm_exec [wasm binary] [arguments]"),t.exit(1));var h=new Go;h.argv=t.argv.slice(2),h.env=Object.assign({TMPDIR:n("3c43").tmpdir()},Object({NODE_ENV:"production",BASE_URL:"/mole-is-more/"})),h.exit=t.exit,WebAssembly.instantiate(fs.readFileSync(t.argv[2]),h.importObject).then((function(e){return t.on("exit",(function(e){0!==e||h.exited||(h._pendingEvent={id:0},h._resume())})),h.run(e.instance)})).catch((function(e){console.error(e),t.exit(1)}))}})()}).call(this,n("c8ba"),n("f28c"),n("dd40")(e))},1:function(e,t){},10:function(e,t){},11:function(e,t){},12:function(e,t){},13:function(e,t){},14:function(e,t){},2:function(e,t){},2364:function(e,t){e.exports=monaco},3:function(e,t){},4:function(e,t){},"402a":function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return s}));var r=n("faa1"),o=n.n(r),i=new o.a,s="wasm_ready"},"4fe4":function(e,t){function n(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}n.keys=function(){return[]},n.resolve=n,e.exports=n,n.id="4fe4"},5:function(e,t){},"56d7":function(e,t,n){"use strict";n.r(t);n("96cf");var r=n("3b8d"),o=(n("cadf"),n("551c"),n("f751"),n("097d"),n("2b0e")),i=n("e37d"),s=n("4eb5"),a=n.n(s),c=n("ee98"),u=n.n(c),l=n("402a"),f=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"app"}},[n("div",{attrs:{id:"nav"}},[n("div",{attrs:{id:"title"}},[n("div",{staticClass:"inner"},[n("VDropdown",{scopedSlots:e._u([{key:"popper",fn:function(){return[n("div",{staticClass:"desc"},[n("p",[n("a",{attrs:{href:"https://github.com/hsiaosiyuan0/mole",target:"_blank"}},[e._v("Mole")]),e._v("\n                is a toolkit written in Golang provides various\n                functionalities to process source code of the frontend\n                projects.\n              ")]),n("p",[e._v("\n                This page is for demonstrating the JavaScript Parser shipped\n                within Mole which is running directly in this page base on\n                WASM.\n              ")]),n("p",[e._v("\n                Paste your JavaScript code in left panel and see its AST in\n                right panel.\n              ")]),n("p",[e._v("\n                This is the\n                "),n("a",{attrs:{href:"https://github.com/hsiaosiyuan0/mole-is-more",target:"_blank"}},[e._v("source code")]),e._v(" of this craft, if you're interested in what happens internally :)\n              ")])])]},proxy:!0}])},[n("span",{staticClass:"mark"},[e._v("?")])])],1)])]),n("router-view"),n("notifications",{attrs:{position:"bottom right"}})],1)},d=[],m=(n("034f"),n("2877")),p={},h=Object(m["a"])(p,f,d,!1,null,null,null),v=h.exports,g=n("8c4f");o["default"].use(g["a"]);var y=new g["a"]({routes:[{path:"/",name:"ast",component:function(){return n.e("ast").then(n.bind(null,"ad5f"))}}]}),w=n("2f62");o["default"].use(w["a"]);var b=new w["a"].Store({state:{},mutations:{},actions:{}});n("07dd"),n("096e");o["default"].config.productionTip=!1,o["default"].use(i["a"]),o["default"].use(a.a),o["default"].use(u.a),window.require.config({paths:{vs:"https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.17.0/min/vs"}}),window.MonacoEnvironment={getWorkerUrl:function(e,t){return"data:text/javascript;charset=utf-8,".concat(encodeURIComponent("\n  self.MonacoEnvironment = {\n    baseUrl: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.17.0/min/'\n  };\n  importScripts('https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.17.0/min/vs/base/worker/workerMain.js');"))}},window.require(["vs/editor/editor.main"],(function(){monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({noSemanticValidation:!1,noSyntaxValidation:!1}),monaco.languages.typescript.typescriptDefaults.setCompilerOptions({target:monaco.languages.typescript.ScriptTarget.Latest,allowNonTsExtensions:!0,moduleResolution:monaco.languages.typescript.ModuleResolutionKind.NodeJs,module:monaco.languages.typescript.ModuleKind.CommonJS,noEmit:!0,esModuleInterop:!0,jsx:monaco.languages.typescript.JsxEmit.React,reactNamespace:"React",allowJs:!0}),new o["default"]({router:y,store:b,render:function(e){return e(v)}}).$mount("#app")})),Object(r["a"])(regeneratorRuntime.mark((function e(){var t,n,r,o,i;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return t=new Go,e.next=3,fetch("https://blog.thehardways.me/mole-is-more/assets/mole.wasm");case 3:return n=e.sent,e.next=6,n.arrayBuffer();case 6:return r=e.sent,e.next=9,WebAssembly.compile(r);case 9:return o=e.sent,e.next=12,WebAssembly.instantiate(o,t.importObject);case 12:return i=e.sent,setTimeout((function(){l["b"].emit(l["a"])}),300),e.next=16,t.run(i);case 16:case"end":return e.stop()}}),e)})))()},6:function(e,t){},"64a9":function(e,t,n){},7:function(e,t){},8:function(e,t){},9:function(e,t){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC52dWU/NWI4NSIsIndlYnBhY2s6Ly8vLi9zcmMvd2FzbV9leGVjLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcIm1vbmFjb1wiIiwid2VicGFjazovLy8uL3NyYy9ldmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMgc3luYyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT9mMDA5Iiwid2VicGFjazovLy8uL3NyYy9BcHAudnVlIiwid2VicGFjazovLy8uL3NyYy9yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlLmpzIiwid2VicGFjazovLy8uL3NyYy9tYWluLmpzIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucENhbGxiYWNrIiwiZGF0YSIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJleGVjdXRlTW9kdWxlcyIsImkiLCJyZXNvbHZlcyIsImxlbmd0aCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluc3RhbGxlZENodW5rcyIsInB1c2giLCJtb2R1bGVzIiwicGFyZW50SnNvbnBGdW5jdGlvbiIsInNoaWZ0IiwiZGVmZXJyZWRNb2R1bGVzIiwiYXBwbHkiLCJjaGVja0RlZmVycmVkTW9kdWxlcyIsInJlc3VsdCIsImRlZmVycmVkTW9kdWxlIiwiZnVsZmlsbGVkIiwiaiIsImRlcElkIiwic3BsaWNlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiaW5zdGFsbGVkQ3NzQ2h1bmtzIiwianNvbnBTY3JpcHRTcmMiLCJwIiwiZXhwb3J0cyIsIm1vZHVsZSIsImwiLCJlIiwicHJvbWlzZXMiLCJjc3NDaHVua3MiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImhyZWYiLCJmdWxsaHJlZiIsImV4aXN0aW5nTGlua1RhZ3MiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidGFnIiwiZGF0YUhyZWYiLCJnZXRBdHRyaWJ1dGUiLCJyZWwiLCJleGlzdGluZ1N0eWxlVGFncyIsImxpbmtUYWciLCJjcmVhdGVFbGVtZW50IiwidHlwZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJldmVudCIsInJlcXVlc3QiLCJ0YXJnZXQiLCJzcmMiLCJlcnIiLCJFcnJvciIsImNvZGUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJ0aGVuIiwiaW5zdGFsbGVkQ2h1bmtEYXRhIiwicHJvbWlzZSIsIm9uU2NyaXB0Q29tcGxldGUiLCJzY3JpcHQiLCJjaGFyc2V0IiwidGltZW91dCIsIm5jIiwic2V0QXR0cmlidXRlIiwiZXJyb3IiLCJjbGVhclRpbWVvdXQiLCJjaHVuayIsImVycm9yVHlwZSIsInJlYWxTcmMiLCJtZXNzYWdlIiwibmFtZSIsInVuZGVmaW5lZCIsInNldFRpbWVvdXQiLCJhbGwiLCJtIiwiYyIsImQiLCJnZXR0ZXIiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJvZSIsImNvbnNvbGUiLCJqc29ucEFycmF5Iiwid2luZG93Iiwib2xkSnNvbnBGdW5jdGlvbiIsInNsaWNlIiwiZ2xvYmFsIiwic2VsZiIsInJlcXVpcmUiLCJmcyIsImtleXMiLCJlbm9zeXMiLCJvdXRwdXRCdWYiLCJjb25zdGFudHMiLCJPX1dST05MWSIsIk9fUkRXUiIsIk9fQ1JFQVQiLCJPX1RSVU5DIiwiT19BUFBFTkQiLCJPX0VYQ0wiLCJ3cml0ZVN5bmMiLCJmZCIsImJ1ZiIsImRlY29kZXIiLCJkZWNvZGUiLCJubCIsImxhc3RJbmRleE9mIiwibG9nIiwic3Vic3RyIiwid3JpdGUiLCJvZmZzZXQiLCJwb3NpdGlvbiIsImNhbGxiYWNrIiwidGhpcyIsImNobW9kIiwicGF0aCIsImNob3duIiwidWlkIiwiZ2lkIiwiY2xvc2UiLCJmY2htb2QiLCJmY2hvd24iLCJmc3RhdCIsImZzeW5jIiwiZnRydW5jYXRlIiwibGNob3duIiwibGluayIsImxzdGF0IiwibWtkaXIiLCJwZXJtIiwib3BlbiIsImZsYWdzIiwicmVhZCIsImJ1ZmZlciIsInJlYWRkaXIiLCJyZWFkbGluayIsInJlbmFtZSIsImZyb20iLCJ0byIsInJtZGlyIiwic3RhdCIsInN5bWxpbmsiLCJ0cnVuY2F0ZSIsInVubGluayIsInV0aW1lcyIsImF0aW1lIiwibXRpbWUiLCJwcm9jZXNzIiwiZ2V0dWlkIiwiZ2V0Z2lkIiwiZ2V0ZXVpZCIsImdldGVnaWQiLCJnZXRncm91cHMiLCJwaWQiLCJwcGlkIiwidW1hc2siLCJjd2QiLCJjaGRpciIsImNyeXB0byIsIm5vZGVDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJiIiwicmFuZG9tRmlsbFN5bmMiLCJwZXJmb3JtYW5jZSIsIm5vdyIsImhydGltZSIsInNlYyIsIm5zZWMiLCJUZXh0RW5jb2RlciIsIlRleHREZWNvZGVyIiwiZW5jb2RlciIsIkdvIiwiYXJndiIsImVudiIsImV4aXQiLCJ3YXJuIiwiX2V4aXRQcm9taXNlIiwiX3Jlc29sdmVFeGl0UHJvbWlzZSIsIl9wZW5kaW5nRXZlbnQiLCJfc2NoZWR1bGVkVGltZW91dHMiLCJNYXAiLCJfbmV4dENhbGxiYWNrVGltZW91dElEIiwic2V0SW50NjQiLCJhZGRyIiwidiIsIm1lbSIsInNldFVpbnQzMiIsIk1hdGgiLCJmbG9vciIsImdldEludDY0IiwibG93IiwiZ2V0VWludDMyIiwiaGlnaCIsImdldEludDMyIiwibG9hZFZhbHVlIiwiZiIsImdldEZsb2F0NjQiLCJpc05hTiIsImlkIiwiX3ZhbHVlcyIsInN0b3JlVmFsdWUiLCJuYW5IZWFkIiwic2V0RmxvYXQ2NCIsIl9pZHMiLCJfaWRQb29sIiwicG9wIiwiX2dvUmVmQ291bnRzIiwic2V0IiwidHlwZUZsYWciLCJsb2FkU2xpY2UiLCJhcnJheSIsImxlbiIsIlVpbnQ4QXJyYXkiLCJfaW5zdCIsImxvYWRTbGljZU9mVmFsdWVzIiwiYSIsIkFycmF5IiwibG9hZFN0cmluZyIsInNhZGRyIiwiRGF0YVZpZXciLCJ0aW1lT3JpZ2luIiwiRGF0ZSIsImltcG9ydE9iamVjdCIsImdvIiwic3AiLCJleGl0ZWQiLCJtc2VjIiwiZ2V0VGltZSIsInNldEludDMyIiwiX3Jlc3VtZSIsImhhcyIsImRlbGV0ZSIsIlJlZmxlY3QiLCJnZXRzcCIsImRlbGV0ZVByb3BlcnR5IiwiYXJncyIsInNldFVpbnQ4IiwiY29uc3RydWN0IiwicGFyc2VJbnQiLCJzdHIiLCJlbmNvZGUiLCJTdHJpbmciLCJkc3QiLCJVaW50OENsYW1wZWRBcnJheSIsInRvQ29weSIsInN1YmFycmF5IiwiaW5zdGFuY2UiLCJXZWJBc3NlbWJseSIsIkluc3RhbmNlIiwiTmFOIiwiZmlsbCIsIkluZmluaXR5Iiwic3RyUHRyIiwicHRyIiwiYnl0ZXMiLCJhcmdjIiwiYXJndlB0cnMiLCJmb3JFYWNoIiwiYXJnIiwic29ydCIsIndhc21NaW5EYXRhQWRkciIsInJ1biIsInJlc3VtZSIsImFyZ3VtZW50cyIsIm1haW4iLCJ2ZXJzaW9ucyIsImVsZWN0cm9uIiwiYXNzaWduIiwiVE1QRElSIiwidG1wZGlyIiwiaW5zdGFudGlhdGUiLCJyZWFkRmlsZVN5bmMiLCJvbiIsImNhdGNoIiwibW9uYWNvIiwiRXZlbnRCdXMiLCJFdmVudEVtaXR0ZXIiLCJFVkVOVF9XQVNNX1JFQURZIiwid2VicGFja0VtcHR5Q29udGV4dCIsInJlcSIsIl92bSIsIl9oIiwiJGNyZWF0ZUVsZW1lbnQiLCJfYyIsIl9zZWxmIiwiYXR0cnMiLCJzdGF0aWNDbGFzcyIsInNjb3BlZFNsb3RzIiwiX3UiLCJmbiIsIl92IiwicHJveHkiLCJzdGF0aWNSZW5kZXJGbnMiLCJjb21wb25lbnQiLCJWdWUiLCJ1c2UiLCJSb3V0ZXIiLCJyb3V0ZXMiLCJWdWV4IiwiU3RvcmUiLCJzdGF0ZSIsIm11dGF0aW9ucyIsImFjdGlvbnMiLCJjb25maWciLCJwcm9kdWN0aW9uVGlwIiwiVlRvb2x0aXAiLCJWdWVDbGlwYm9hcmQiLCJOb3RpZmljYXRpb25zIiwicGF0aHMiLCJ2cyIsIk1vbmFjb0Vudmlyb25tZW50IiwiZ2V0V29ya2VyVXJsIiwid29ya2VySWQiLCJsYWJlbCIsImVuY29kZVVSSUNvbXBvbmVudCIsImxhbmd1YWdlcyIsInR5cGVzY3JpcHQiLCJ0eXBlc2NyaXB0RGVmYXVsdHMiLCJzZXREaWFnbm9zdGljc09wdGlvbnMiLCJub1NlbWFudGljVmFsaWRhdGlvbiIsIm5vU3ludGF4VmFsaWRhdGlvbiIsInNldENvbXBpbGVyT3B0aW9ucyIsIlNjcmlwdFRhcmdldCIsIkxhdGVzdCIsImFsbG93Tm9uVHNFeHRlbnNpb25zIiwibW9kdWxlUmVzb2x1dGlvbiIsIk1vZHVsZVJlc29sdXRpb25LaW5kIiwiTm9kZUpzIiwiTW9kdWxlS2luZCIsIkNvbW1vbkpTIiwibm9FbWl0IiwiZXNNb2R1bGVJbnRlcm9wIiwianN4IiwiSnN4RW1pdCIsIlJlYWN0IiwicmVhY3ROYW1lc3BhY2UiLCJhbGxvd0pzIiwicm91dGVyIiwic3RvcmUiLCJyZW5kZXIiLCJoIiwiQXBwIiwiJG1vdW50IiwiZmV0Y2giLCJyZXNwb25zZSIsImFycmF5QnVmZmVyIiwiY29tcGlsZSIsIm1vZCIsImluc3QiLCJlbWl0Il0sIm1hcHBpbmdzIjoiYUFDRSxTQUFTQSxFQUFxQkMsR0FRN0IsSUFQQSxJQU1JQyxFQUFVQyxFQU5WQyxFQUFXSCxFQUFLLEdBQ2hCSSxFQUFjSixFQUFLLEdBQ25CSyxFQUFpQkwsRUFBSyxHQUlITSxFQUFJLEVBQUdDLEVBQVcsR0FDcENELEVBQUlILEVBQVNLLE9BQVFGLElBQ3pCSixFQUFVQyxFQUFTRyxHQUNoQkcsT0FBT0MsVUFBVUMsZUFBZUMsS0FBS0MsRUFBaUJYLElBQVlXLEVBQWdCWCxJQUNwRkssRUFBU08sS0FBS0QsRUFBZ0JYLEdBQVMsSUFF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LEdBRGhCLFNBRXdCNEssTUFDckIsNkRBSEgsY0FFT0MsRUFGUCxnQkFLc0JBLEVBQVNDLGNBTC9CLGNBS09wTixFQUxQLGdCQU1tQmtILFlBQVltRyxRQUFRck4sR0FOdkMsY0FNT3NOLEVBTlAsaUJBT29CcEcsWUFBWXVCLFlBQVk2RSxFQUFLNUgsRUFBR0QsY0FQcEQsZUFPTzhILEVBUFAsT0FTQ3BTLFlBQVcsV0FDVDJOLE9BQVMwRSxLQUFLeEUsVUFDYixLQVhKLFVBYU90RCxFQUFHc0MsSUFBSXVGLEdBYmQsMkNBQUQsSSIsImZpbGUiOiJqcy9hcHAuZTIwNWM4NDkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdGZ1bmN0aW9uIHdlYnBhY2tKc29ucENhbGxiYWNrKGRhdGEpIHtcbiBcdFx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcbiBcdFx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcbiBcdFx0dmFyIGV4ZWN1dGVNb2R1bGVzID0gZGF0YVsyXTtcblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0XHQvLyBhZGQgZW50cnkgbW9kdWxlcyBmcm9tIGxvYWRlZCBjaHVuayB0byBkZWZlcnJlZCBsaXN0XG4gXHRcdGRlZmVycmVkTW9kdWxlcy5wdXNoLmFwcGx5KGRlZmVycmVkTW9kdWxlcywgZXhlY3V0ZU1vZHVsZXMgfHwgW10pO1xuXG4gXHRcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gYWxsIGNodW5rcyByZWFkeVxuIFx0XHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiBcdH07XG4gXHRmdW5jdGlvbiBjaGVja0RlZmVycmVkTW9kdWxlcygpIHtcbiBcdFx0dmFyIHJlc3VsdDtcbiBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlZmVycmVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBkZWZlcnJlZE1vZHVsZSA9IGRlZmVycmVkTW9kdWxlc1tpXTtcbiBcdFx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcbiBcdFx0XHRmb3IodmFyIGogPSAxOyBqIDwgZGVmZXJyZWRNb2R1bGUubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBkZXBJZCA9IGRlZmVycmVkTW9kdWxlW2pdO1xuIFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2RlcElkXSAhPT0gMCkgZnVsZmlsbGVkID0gZmFsc2U7XG4gXHRcdFx0fVxuIFx0XHRcdGlmKGZ1bGZpbGxlZCkge1xuIFx0XHRcdFx0ZGVmZXJyZWRNb2R1bGVzLnNwbGljZShpLS0sIDEpO1xuIFx0XHRcdFx0cmVzdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBkZWZlcnJlZE1vZHVsZVswXSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBDU1MgY2h1bmtzXG4gXHR2YXIgaW5zdGFsbGVkQ3NzQ2h1bmtzID0ge1xuIFx0XHRcImFwcFwiOiAwXG4gXHR9XG5cbiBcdC8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4gXHQvLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbiBcdC8vIFByb21pc2UgPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG4gXHR2YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuIFx0XHRcImFwcFwiOiAwXG4gXHR9O1xuXG4gXHR2YXIgZGVmZXJyZWRNb2R1bGVzID0gW107XG5cbiBcdC8vIHNjcmlwdCBwYXRoIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBqc29ucFNjcmlwdFNyYyhjaHVua0lkKSB7XG4gXHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcImpzL1wiICsgKHtcImFzdFwiOlwiYXN0XCJ9W2NodW5rSWRdfHxjaHVua0lkKSArIFwiLlwiICsge1wiYXN0XCI6XCJjN2Y3NGM0NVwifVtjaHVua0lkXSArIFwiLmpzXCJcbiBcdH1cblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG4gXHQvLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4gXHQvLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3NcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZSA9IGZ1bmN0aW9uIHJlcXVpcmVFbnN1cmUoY2h1bmtJZCkge1xuIFx0XHR2YXIgcHJvbWlzZXMgPSBbXTtcblxuXG4gXHRcdC8vIG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIENTUyBsb2FkaW5nXG4gXHRcdHZhciBjc3NDaHVua3MgPSB7XCJhc3RcIjoxfTtcbiBcdFx0aWYoaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdKSBwcm9taXNlcy5wdXNoKGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSk7XG4gXHRcdGVsc2UgaWYoaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdICE9PSAwICYmIGNzc0NodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHR2YXIgaHJlZiA9IFwiY3NzL1wiICsgKHtcImFzdFwiOlwiYXN0XCJ9W2NodW5rSWRdfHxjaHVua0lkKSArIFwiLlwiICsge1wiYXN0XCI6XCJiOWUwODVlYlwifVtjaHVua0lkXSArIFwiLmNzc1wiO1xuIFx0XHRcdFx0dmFyIGZ1bGxocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgaHJlZjtcbiBcdFx0XHRcdHZhciBleGlzdGluZ0xpbmtUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIpO1xuIFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nTGlua1RhZ3MubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0dmFyIHRhZyA9IGV4aXN0aW5nTGlua1RhZ3NbaV07XG4gXHRcdFx0XHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIikgfHwgdGFnLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG4gXHRcdFx0XHRcdGlmKHRhZy5yZWwgPT09IFwic3R5bGVzaGVldFwiICYmIChkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpKSByZXR1cm4gcmVzb2x2ZSgpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0dmFyIGV4aXN0aW5nU3R5bGVUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzdHlsZVwiKTtcbiBcdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ1N0eWxlVGFncy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHR2YXIgdGFnID0gZXhpc3RpbmdTdHlsZVRhZ3NbaV07XG4gXHRcdFx0XHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIik7XG4gXHRcdFx0XHRcdGlmKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikgcmV0dXJuIHJlc29sdmUoKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHZhciBsaW5rVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gXHRcdFx0XHRsaW5rVGFnLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuIFx0XHRcdFx0bGlua1RhZy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuIFx0XHRcdFx0bGlua1RhZy5vbmxvYWQgPSByZXNvbHZlO1xuIFx0XHRcdFx0bGlua1RhZy5vbmVycm9yID0gZnVuY3Rpb24oZXZlbnQpIHtcbiBcdFx0XHRcdFx0dmFyIHJlcXVlc3QgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYyB8fCBmdWxsaHJlZjtcbiBcdFx0XHRcdFx0dmFyIGVyciA9IG5ldyBFcnJvcihcIkxvYWRpbmcgQ1NTIGNodW5rIFwiICsgY2h1bmtJZCArIFwiIGZhaWxlZC5cXG4oXCIgKyByZXF1ZXN0ICsgXCIpXCIpO1xuIFx0XHRcdFx0XHRlcnIuY29kZSA9IFwiQ1NTX0NIVU5LX0xPQURfRkFJTEVEXCI7XG4gXHRcdFx0XHRcdGVyci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiBcdFx0XHRcdFx0ZGVsZXRlIGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXVxuIFx0XHRcdFx0XHRsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcbiBcdFx0XHRcdFx0cmVqZWN0KGVycik7XG4gXHRcdFx0XHR9O1xuIFx0XHRcdFx0bGlua1RhZy5ocmVmID0gZnVsbGhyZWY7XG5cbiBcdFx0XHRcdHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xuIFx0XHRcdFx0aGVhZC5hcHBlbmRDaGlsZChsaW5rVGFnKTtcbiBcdFx0XHR9KS50aGVuKGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0aW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0XHR9KSk7XG4gXHRcdH1cblxuIFx0XHQvLyBKU09OUCBjaHVuayBsb2FkaW5nIGZvciBqYXZhc2NyaXB0XG5cbiBcdFx0dmFyIGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSB7IC8vIDAgbWVhbnMgXCJhbHJlYWR5IGluc3RhbGxlZFwiLlxuXG4gXHRcdFx0Ly8gYSBQcm9taXNlIG1lYW5zIFwiY3VycmVudGx5IGxvYWRpbmdcIi5cbiBcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcbiBcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdKTtcbiBcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0Ly8gc2V0dXAgUHJvbWlzZSBpbiBjaHVuayBjYWNoZVxuIFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF07XG4gXHRcdFx0XHR9KTtcbiBcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZSk7XG5cbiBcdFx0XHRcdC8vIHN0YXJ0IGNodW5rIGxvYWRpbmdcbiBcdFx0XHRcdHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiBcdFx0XHRcdHZhciBvblNjcmlwdENvbXBsZXRlO1xuXG4gXHRcdFx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG4gXHRcdFx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcbiBcdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG4gXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHNjcmlwdC5zcmMgPSBqc29ucFNjcmlwdFNyYyhjaHVua0lkKTtcblxuIFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuIFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG4gXHRcdFx0XHRvblNjcmlwdENvbXBsZXRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gXHRcdFx0XHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cbiBcdFx0XHRcdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcbiBcdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuIFx0XHRcdFx0XHR2YXIgY2h1bmsgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHRcdFx0XHRcdGlmKGNodW5rICE9PSAwKSB7XG4gXHRcdFx0XHRcdFx0aWYoY2h1bmspIHtcbiBcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG4gXHRcdFx0XHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuIFx0XHRcdFx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcbiBcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuIFx0XHRcdFx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcbiBcdFx0XHRcdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuIFx0XHRcdFx0XHRcdFx0Y2h1bmtbMV0oZXJyb3IpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH07XG4gXHRcdFx0XHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiBcdFx0XHRcdFx0b25TY3JpcHRDb21wbGV0ZSh7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSk7XG4gXHRcdFx0XHR9LCAxMjAwMDApO1xuIFx0XHRcdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZTtcbiBcdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0cmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiBcdH07XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvbW9sZS1pcy1tb3JlL1wiO1xuXG4gXHQvLyBvbiBlcnJvciBmdW5jdGlvbiBmb3IgYXN5bmMgbG9hZGluZ1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vZSA9IGZ1bmN0aW9uKGVycikgeyBjb25zb2xlLmVycm9yKGVycik7IHRocm93IGVycjsgfTtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIGFkZCBlbnRyeSBtb2R1bGUgdG8gZGVmZXJyZWQgbGlzdFxuIFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2goWzAsXCJjaHVuay12ZW5kb3JzXCJdKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTYtb25lT2YtMS0wIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTYtb25lT2YtMS0xIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTYtb25lT2YtMS0yIS4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9Y3NzJlwiIiwiLy8gQ29weXJpZ2h0IDIwMTggVGhlIEdvIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZVxuLy8gbGljZW5zZSB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLlxuXG4oKCkgPT4ge1xuXHQvLyBNYXAgbXVsdGlwbGUgSmF2YVNjcmlwdCBlbnZpcm9ubWVudHMgdG8gYSBzaW5nbGUgY29tbW9uIEFQSSxcblx0Ly8gcHJlZmVycmluZyB3ZWIgc3RhbmRhcmRzIG92ZXIgTm9kZS5qcyBBUEkuXG5cdC8vXG5cdC8vIEVudmlyb25tZW50cyBjb25zaWRlcmVkOlxuXHQvLyAtIEJyb3dzZXJzXG5cdC8vIC0gTm9kZS5qc1xuXHQvLyAtIEVsZWN0cm9uXG5cdC8vIC0gUGFyY2VsXG5cdC8vIC0gV2VicGFja1xuXG5cdGlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0Ly8gZ2xvYmFsIGFscmVhZHkgZXhpc3RzXG5cdH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdHdpbmRvdy5nbG9iYWwgPSB3aW5kb3c7XG5cdH0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRzZWxmLmdsb2JhbCA9IHNlbGY7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiY2Fubm90IGV4cG9ydCBHbyAobmVpdGhlciBnbG9iYWwsIHdpbmRvdyBub3Igc2VsZiBpcyBkZWZpbmVkKVwiKTtcblx0fVxuXG5cdGlmICghZ2xvYmFsLnJlcXVpcmUgJiYgdHlwZW9mIHJlcXVpcmUgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRnbG9iYWwucmVxdWlyZSA9IHJlcXVpcmU7XG5cdH1cblxuXHRpZiAoIWdsb2JhbC5mcyAmJiBnbG9iYWwucmVxdWlyZSkge1xuXHRcdGNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuXHRcdGlmICh0eXBlb2YgZnMgPT09IFwib2JqZWN0XCIgJiYgZnMgIT09IG51bGwgJiYgT2JqZWN0LmtleXMoZnMpLmxlbmd0aCAhPT0gMCkge1xuXHRcdFx0Z2xvYmFsLmZzID0gZnM7XG5cdFx0fVxuXHR9XG5cblx0Y29uc3QgZW5vc3lzID0gKCkgPT4ge1xuXHRcdGNvbnN0IGVyciA9IG5ldyBFcnJvcihcIm5vdCBpbXBsZW1lbnRlZFwiKTtcblx0XHRlcnIuY29kZSA9IFwiRU5PU1lTXCI7XG5cdFx0cmV0dXJuIGVycjtcblx0fTtcblxuXHRpZiAoIWdsb2JhbC5mcykge1xuXHRcdGxldCBvdXRwdXRCdWYgPSBcIlwiO1xuXHRcdGdsb2JhbC5mcyA9IHtcblx0XHRcdGNvbnN0YW50czogeyBPX1dST05MWTogLTEsIE9fUkRXUjogLTEsIE9fQ1JFQVQ6IC0xLCBPX1RSVU5DOiAtMSwgT19BUFBFTkQ6IC0xLCBPX0VYQ0w6IC0xIH0sIC8vIHVudXNlZFxuXHRcdFx0d3JpdGVTeW5jKGZkLCBidWYpIHtcblx0XHRcdFx0b3V0cHV0QnVmICs9IGRlY29kZXIuZGVjb2RlKGJ1Zik7XG5cdFx0XHRcdGNvbnN0IG5sID0gb3V0cHV0QnVmLmxhc3RJbmRleE9mKFwiXFxuXCIpO1xuXHRcdFx0XHRpZiAobmwgIT0gLTEpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhvdXRwdXRCdWYuc3Vic3RyKDAsIG5sKSk7XG5cdFx0XHRcdFx0b3V0cHV0QnVmID0gb3V0cHV0QnVmLnN1YnN0cihubCArIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBidWYubGVuZ3RoO1xuXHRcdFx0fSxcblx0XHRcdHdyaXRlKGZkLCBidWYsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbiwgY2FsbGJhY2spIHtcblx0XHRcdFx0aWYgKG9mZnNldCAhPT0gMCB8fCBsZW5ndGggIT09IGJ1Zi5sZW5ndGggfHwgcG9zaXRpb24gIT09IG51bGwpIHtcblx0XHRcdFx0XHRjYWxsYmFjayhlbm9zeXMoKSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnN0IG4gPSB0aGlzLndyaXRlU3luYyhmZCwgYnVmKTtcblx0XHRcdFx0Y2FsbGJhY2sobnVsbCwgbik7XG5cdFx0XHR9LFxuXHRcdFx0Y2htb2QocGF0aCwgbW9kZSwgY2FsbGJhY2spIHsgY2FsbGJhY2soZW5vc3lzKCkpOyB9LFxuXHRcdFx0Y2hvd24ocGF0aCwgdWlkLCBnaWQsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdGNsb3NlKGZkLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRmY2htb2QoZmQsIG1vZGUsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdGZjaG93bihmZCwgdWlkLCBnaWQsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdGZzdGF0KGZkLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRmc3luYyhmZCwgY2FsbGJhY2spIHsgY2FsbGJhY2sobnVsbCk7IH0sXG5cdFx0XHRmdHJ1bmNhdGUoZmQsIGxlbmd0aCwgY2FsbGJhY2spIHsgY2FsbGJhY2soZW5vc3lzKCkpOyB9LFxuXHRcdFx0bGNob3duKHBhdGgsIHVpZCwgZ2lkLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRsaW5rKHBhdGgsIGxpbmssIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdGxzdGF0KHBhdGgsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdG1rZGlyKHBhdGgsIHBlcm0sIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdG9wZW4ocGF0aCwgZmxhZ3MsIG1vZGUsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdHJlYWQoZmQsIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRyZWFkZGlyKHBhdGgsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdHJlYWRsaW5rKHBhdGgsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdHJlbmFtZShmcm9tLCB0bywgY2FsbGJhY2spIHsgY2FsbGJhY2soZW5vc3lzKCkpOyB9LFxuXHRcdFx0cm1kaXIocGF0aCwgY2FsbGJhY2spIHsgY2FsbGJhY2soZW5vc3lzKCkpOyB9LFxuXHRcdFx0c3RhdChwYXRoLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRzeW1saW5rKHBhdGgsIGxpbmssIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdHRydW5jYXRlKHBhdGgsIGxlbmd0aCwgY2FsbGJhY2spIHsgY2FsbGJhY2soZW5vc3lzKCkpOyB9LFxuXHRcdFx0dW5saW5rKHBhdGgsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdHV0aW1lcyhwYXRoLCBhdGltZSwgbXRpbWUsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHR9O1xuXHR9XG5cblx0aWYgKCFnbG9iYWwucHJvY2Vzcykge1xuXHRcdGdsb2JhbC5wcm9jZXNzID0ge1xuXHRcdFx0Z2V0dWlkKCkgeyByZXR1cm4gLTE7IH0sXG5cdFx0XHRnZXRnaWQoKSB7IHJldHVybiAtMTsgfSxcblx0XHRcdGdldGV1aWQoKSB7IHJldHVybiAtMTsgfSxcblx0XHRcdGdldGVnaWQoKSB7IHJldHVybiAtMTsgfSxcblx0XHRcdGdldGdyb3VwcygpIHsgdGhyb3cgZW5vc3lzKCk7IH0sXG5cdFx0XHRwaWQ6IC0xLFxuXHRcdFx0cHBpZDogLTEsXG5cdFx0XHR1bWFzaygpIHsgdGhyb3cgZW5vc3lzKCk7IH0sXG5cdFx0XHRjd2QoKSB7IHRocm93IGVub3N5cygpOyB9LFxuXHRcdFx0Y2hkaXIoKSB7IHRocm93IGVub3N5cygpOyB9LFxuXHRcdH1cblx0fVxuXG5cdGlmICghZ2xvYmFsLmNyeXB0byAmJiBnbG9iYWwucmVxdWlyZSkge1xuXHRcdGNvbnN0IG5vZGVDcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuXHRcdGdsb2JhbC5jcnlwdG8gPSB7XG5cdFx0XHRnZXRSYW5kb21WYWx1ZXMoYikge1xuXHRcdFx0XHRub2RlQ3J5cHRvLnJhbmRvbUZpbGxTeW5jKGIpO1xuXHRcdFx0fSxcblx0XHR9O1xuXHR9XG5cdGlmICghZ2xvYmFsLmNyeXB0bykge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImdsb2JhbC5jcnlwdG8gaXMgbm90IGF2YWlsYWJsZSwgcG9seWZpbGwgcmVxdWlyZWQgKGdldFJhbmRvbVZhbHVlcyBvbmx5KVwiKTtcblx0fVxuXG5cdGlmICghZ2xvYmFsLnBlcmZvcm1hbmNlKSB7XG5cdFx0Z2xvYmFsLnBlcmZvcm1hbmNlID0ge1xuXHRcdFx0bm93KCkge1xuXHRcdFx0XHRjb25zdCBbc2VjLCBuc2VjXSA9IHByb2Nlc3MuaHJ0aW1lKCk7XG5cdFx0XHRcdHJldHVybiBzZWMgKiAxMDAwICsgbnNlYyAvIDEwMDAwMDA7XG5cdFx0XHR9LFxuXHRcdH07XG5cdH1cblxuXHRpZiAoIWdsb2JhbC5UZXh0RW5jb2RlciAmJiBnbG9iYWwucmVxdWlyZSkge1xuXHRcdGdsb2JhbC5UZXh0RW5jb2RlciA9IHJlcXVpcmUoXCJ1dGlsXCIpLlRleHRFbmNvZGVyO1xuXHR9XG5cdGlmICghZ2xvYmFsLlRleHRFbmNvZGVyKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiZ2xvYmFsLlRleHRFbmNvZGVyIGlzIG5vdCBhdmFpbGFibGUsIHBvbHlmaWxsIHJlcXVpcmVkXCIpO1xuXHR9XG5cblx0aWYgKCFnbG9iYWwuVGV4dERlY29kZXIgJiYgZ2xvYmFsLnJlcXVpcmUpIHtcblx0XHRnbG9iYWwuVGV4dERlY29kZXIgPSByZXF1aXJlKFwidXRpbFwiKS5UZXh0RGVjb2Rlcjtcblx0fVxuXHRpZiAoIWdsb2JhbC5UZXh0RGVjb2Rlcikge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImdsb2JhbC5UZXh0RGVjb2RlciBpcyBub3QgYXZhaWxhYmxlLCBwb2x5ZmlsbCByZXF1aXJlZFwiKTtcblx0fVxuXG5cdC8vIEVuZCBvZiBwb2x5ZmlsbHMgZm9yIGNvbW1vbiBBUEkuXG5cblx0Y29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcihcInV0Zi04XCIpO1xuXHRjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKFwidXRmLThcIik7XG5cblx0Z2xvYmFsLkdvID0gY2xhc3Mge1xuXHRcdGNvbnN0cnVjdG9yKCkge1xuXHRcdFx0dGhpcy5hcmd2ID0gW1wianNcIl07XG5cdFx0XHR0aGlzLmVudiA9IHt9O1xuXHRcdFx0dGhpcy5leGl0ID0gKGNvZGUpID0+IHtcblx0XHRcdFx0aWYgKGNvZGUgIT09IDApIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJleGl0IGNvZGU6XCIsIGNvZGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0dGhpcy5fZXhpdFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLl9yZXNvbHZlRXhpdFByb21pc2UgPSByZXNvbHZlO1xuXHRcdFx0fSk7XG5cdFx0XHR0aGlzLl9wZW5kaW5nRXZlbnQgPSBudWxsO1xuXHRcdFx0dGhpcy5fc2NoZWR1bGVkVGltZW91dHMgPSBuZXcgTWFwKCk7XG5cdFx0XHR0aGlzLl9uZXh0Q2FsbGJhY2tUaW1lb3V0SUQgPSAxO1xuXG5cdFx0XHRjb25zdCBzZXRJbnQ2NCA9IChhZGRyLCB2KSA9PiB7XG5cdFx0XHRcdHRoaXMubWVtLnNldFVpbnQzMihhZGRyICsgMCwgdiwgdHJ1ZSk7XG5cdFx0XHRcdHRoaXMubWVtLnNldFVpbnQzMihhZGRyICsgNCwgTWF0aC5mbG9vcih2IC8gNDI5NDk2NzI5NiksIHRydWUpO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBnZXRJbnQ2NCA9IChhZGRyKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGxvdyA9IHRoaXMubWVtLmdldFVpbnQzMihhZGRyICsgMCwgdHJ1ZSk7XG5cdFx0XHRcdGNvbnN0IGhpZ2ggPSB0aGlzLm1lbS5nZXRJbnQzMihhZGRyICsgNCwgdHJ1ZSk7XG5cdFx0XHRcdHJldHVybiBsb3cgKyBoaWdoICogNDI5NDk2NzI5Njtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgbG9hZFZhbHVlID0gKGFkZHIpID0+IHtcblx0XHRcdFx0Y29uc3QgZiA9IHRoaXMubWVtLmdldEZsb2F0NjQoYWRkciwgdHJ1ZSk7XG5cdFx0XHRcdGlmIChmID09PSAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWlzTmFOKGYpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGY7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBpZCA9IHRoaXMubWVtLmdldFVpbnQzMihhZGRyLCB0cnVlKTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3ZhbHVlc1tpZF07XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHN0b3JlVmFsdWUgPSAoYWRkciwgdikgPT4ge1xuXHRcdFx0XHRjb25zdCBuYW5IZWFkID0gMHg3RkY4MDAwMDtcblxuXHRcdFx0XHRpZiAodHlwZW9mIHYgPT09IFwibnVtYmVyXCIgJiYgdiAhPT0gMCkge1xuXHRcdFx0XHRcdGlmIChpc05hTih2KSkge1xuXHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDMyKGFkZHIgKyA0LCBuYW5IZWFkLCB0cnVlKTtcblx0XHRcdFx0XHRcdHRoaXMubWVtLnNldFVpbnQzMihhZGRyLCAwLCB0cnVlKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5tZW0uc2V0RmxvYXQ2NChhZGRyLCB2LCB0cnVlKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0dGhpcy5tZW0uc2V0RmxvYXQ2NChhZGRyLCAwLCB0cnVlKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsZXQgaWQgPSB0aGlzLl9pZHMuZ2V0KHYpO1xuXHRcdFx0XHRpZiAoaWQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGlkID0gdGhpcy5faWRQb29sLnBvcCgpO1xuXHRcdFx0XHRcdGlmIChpZCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRpZCA9IHRoaXMuX3ZhbHVlcy5sZW5ndGg7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX3ZhbHVlc1tpZF0gPSB2O1xuXHRcdFx0XHRcdHRoaXMuX2dvUmVmQ291bnRzW2lkXSA9IDA7XG5cdFx0XHRcdFx0dGhpcy5faWRzLnNldCh2LCBpZCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5fZ29SZWZDb3VudHNbaWRdKys7XG5cdFx0XHRcdGxldCB0eXBlRmxhZyA9IDA7XG5cdFx0XHRcdHN3aXRjaCAodHlwZW9mIHYpIHtcblx0XHRcdFx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRcdFx0XHRpZiAodiAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHR0eXBlRmxhZyA9IDE7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdFx0XHR0eXBlRmxhZyA9IDI7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFwic3ltYm9sXCI6XG5cdFx0XHRcdFx0XHR0eXBlRmxhZyA9IDM7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0XHRcdHR5cGVGbGFnID0gNDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMubWVtLnNldFVpbnQzMihhZGRyICsgNCwgbmFuSGVhZCB8IHR5cGVGbGFnLCB0cnVlKTtcblx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDMyKGFkZHIsIGlkLCB0cnVlKTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgbG9hZFNsaWNlID0gKGFkZHIpID0+IHtcblx0XHRcdFx0Y29uc3QgYXJyYXkgPSBnZXRJbnQ2NChhZGRyICsgMCk7XG5cdFx0XHRcdGNvbnN0IGxlbiA9IGdldEludDY0KGFkZHIgKyA4KTtcblx0XHRcdFx0cmV0dXJuIG5ldyBVaW50OEFycmF5KHRoaXMuX2luc3QuZXhwb3J0cy5tZW0uYnVmZmVyLCBhcnJheSwgbGVuKTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgbG9hZFNsaWNlT2ZWYWx1ZXMgPSAoYWRkcikgPT4ge1xuXHRcdFx0XHRjb25zdCBhcnJheSA9IGdldEludDY0KGFkZHIgKyAwKTtcblx0XHRcdFx0Y29uc3QgbGVuID0gZ2V0SW50NjQoYWRkciArIDgpO1xuXHRcdFx0XHRjb25zdCBhID0gbmV3IEFycmF5KGxlbik7XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0XHRhW2ldID0gbG9hZFZhbHVlKGFycmF5ICsgaSAqIDgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBhO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBsb2FkU3RyaW5nID0gKGFkZHIpID0+IHtcblx0XHRcdFx0Y29uc3Qgc2FkZHIgPSBnZXRJbnQ2NChhZGRyICsgMCk7XG5cdFx0XHRcdGNvbnN0IGxlbiA9IGdldEludDY0KGFkZHIgKyA4KTtcblx0XHRcdFx0cmV0dXJuIGRlY29kZXIuZGVjb2RlKG5ldyBEYXRhVmlldyh0aGlzLl9pbnN0LmV4cG9ydHMubWVtLmJ1ZmZlciwgc2FkZHIsIGxlbikpO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCB0aW1lT3JpZ2luID0gRGF0ZS5ub3coKSAtIHBlcmZvcm1hbmNlLm5vdygpO1xuXHRcdFx0dGhpcy5pbXBvcnRPYmplY3QgPSB7XG5cdFx0XHRcdGdvOiB7XG5cdFx0XHRcdFx0Ly8gR28ncyBTUCBkb2VzIG5vdCBjaGFuZ2UgYXMgbG9uZyBhcyBubyBHbyBjb2RlIGlzIHJ1bm5pbmcuIFNvbWUgb3BlcmF0aW9ucyAoZS5nLiBjYWxscywgZ2V0dGVycyBhbmQgc2V0dGVycylcblx0XHRcdFx0XHQvLyBtYXkgc3luY2hyb25vdXNseSB0cmlnZ2VyIGEgR28gZXZlbnQgaGFuZGxlci4gVGhpcyBtYWtlcyBHbyBjb2RlIGdldCBleGVjdXRlZCBpbiB0aGUgbWlkZGxlIG9mIHRoZSBpbXBvcnRlZFxuXHRcdFx0XHRcdC8vIGZ1bmN0aW9uLiBBIGdvcm91dGluZSBjYW4gc3dpdGNoIHRvIGEgbmV3IHN0YWNrIGlmIHRoZSBjdXJyZW50IHN0YWNrIGlzIHRvbyBzbWFsbCAoc2VlIG1vcmVzdGFjayBmdW5jdGlvbikuXG5cdFx0XHRcdFx0Ly8gVGhpcyBjaGFuZ2VzIHRoZSBTUCwgdGh1cyB3ZSBoYXZlIHRvIHVwZGF0ZSB0aGUgU1AgdXNlZCBieSB0aGUgaW1wb3J0ZWQgZnVuY3Rpb24uXG5cblx0XHRcdFx0XHQvLyBmdW5jIHdhc21FeGl0KGNvZGUgaW50MzIpXG5cdFx0XHRcdFx0XCJydW50aW1lLndhc21FeGl0XCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0Y29uc3QgY29kZSA9IHRoaXMubWVtLmdldEludDMyKHNwICsgOCwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHR0aGlzLmV4aXRlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRkZWxldGUgdGhpcy5faW5zdDtcblx0XHRcdFx0XHRcdGRlbGV0ZSB0aGlzLl92YWx1ZXM7XG5cdFx0XHRcdFx0XHRkZWxldGUgdGhpcy5fZ29SZWZDb3VudHM7XG5cdFx0XHRcdFx0XHRkZWxldGUgdGhpcy5faWRzO1xuXHRcdFx0XHRcdFx0ZGVsZXRlIHRoaXMuX2lkUG9vbDtcblx0XHRcdFx0XHRcdHRoaXMuZXhpdChjb2RlKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gZnVuYyB3YXNtV3JpdGUoZmQgdWludHB0ciwgcCB1bnNhZmUuUG9pbnRlciwgbiBpbnQzMilcblx0XHRcdFx0XHRcInJ1bnRpbWUud2FzbVdyaXRlXCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0Y29uc3QgZmQgPSBnZXRJbnQ2NChzcCArIDgpO1xuXHRcdFx0XHRcdFx0Y29uc3QgcCA9IGdldEludDY0KHNwICsgMTYpO1xuXHRcdFx0XHRcdFx0Y29uc3QgbiA9IHRoaXMubWVtLmdldEludDMyKHNwICsgMjQsIHRydWUpO1xuXHRcdFx0XHRcdFx0ZnMud3JpdGVTeW5jKGZkLCBuZXcgVWludDhBcnJheSh0aGlzLl9pbnN0LmV4cG9ydHMubWVtLmJ1ZmZlciwgcCwgbikpO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyBmdW5jIHJlc2V0TWVtb3J5RGF0YVZpZXcoKVxuXHRcdFx0XHRcdFwicnVudGltZS5yZXNldE1lbW9yeURhdGFWaWV3XCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0dGhpcy5tZW0gPSBuZXcgRGF0YVZpZXcodGhpcy5faW5zdC5leHBvcnRzLm1lbS5idWZmZXIpO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyBmdW5jIG5hbm90aW1lMSgpIGludDY0XG5cdFx0XHRcdFx0XCJydW50aW1lLm5hbm90aW1lMVwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdHNldEludDY0KHNwICsgOCwgKHRpbWVPcmlnaW4gKyBwZXJmb3JtYW5jZS5ub3coKSkgKiAxMDAwMDAwKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gZnVuYyB3YWxsdGltZSgpIChzZWMgaW50NjQsIG5zZWMgaW50MzIpXG5cdFx0XHRcdFx0XCJydW50aW1lLndhbGx0aW1lXCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0Y29uc3QgbXNlYyA9IChuZXcgRGF0ZSkuZ2V0VGltZSgpO1xuXHRcdFx0XHRcdFx0c2V0SW50NjQoc3AgKyA4LCBtc2VjIC8gMTAwMCk7XG5cdFx0XHRcdFx0XHR0aGlzLm1lbS5zZXRJbnQzMihzcCArIDE2LCAobXNlYyAlIDEwMDApICogMTAwMDAwMCwgdHJ1ZSk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgc2NoZWR1bGVUaW1lb3V0RXZlbnQoZGVsYXkgaW50NjQpIGludDMyXG5cdFx0XHRcdFx0XCJydW50aW1lLnNjaGVkdWxlVGltZW91dEV2ZW50XCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0Y29uc3QgaWQgPSB0aGlzLl9uZXh0Q2FsbGJhY2tUaW1lb3V0SUQ7XG5cdFx0XHRcdFx0XHR0aGlzLl9uZXh0Q2FsbGJhY2tUaW1lb3V0SUQrKztcblx0XHRcdFx0XHRcdHRoaXMuX3NjaGVkdWxlZFRpbWVvdXRzLnNldChpZCwgc2V0VGltZW91dChcblx0XHRcdFx0XHRcdFx0KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX3Jlc3VtZSgpO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICh0aGlzLl9zY2hlZHVsZWRUaW1lb3V0cy5oYXMoaWQpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBmb3Igc29tZSByZWFzb24gR28gZmFpbGVkIHRvIHJlZ2lzdGVyIHRoZSB0aW1lb3V0IGV2ZW50LCBsb2cgYW5kIHRyeSBhZ2FpblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gKHRlbXBvcmFyeSB3b3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nL2dvL2lzc3Vlcy8yODk3NSlcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcInNjaGVkdWxlVGltZW91dEV2ZW50OiBtaXNzZWQgdGltZW91dCBldmVudFwiKTtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuX3Jlc3VtZSgpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0Z2V0SW50NjQoc3AgKyA4KSArIDEsIC8vIHNldFRpbWVvdXQgaGFzIGJlZW4gc2VlbiB0byBmaXJlIHVwIHRvIDEgbWlsbGlzZWNvbmQgZWFybHlcblx0XHRcdFx0XHRcdCkpO1xuXHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0SW50MzIoc3AgKyAxNiwgaWQsIHRydWUpO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyBmdW5jIGNsZWFyVGltZW91dEV2ZW50KGlkIGludDMyKVxuXHRcdFx0XHRcdFwicnVudGltZS5jbGVhclRpbWVvdXRFdmVudFwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNvbnN0IGlkID0gdGhpcy5tZW0uZ2V0SW50MzIoc3AgKyA4LCB0cnVlKTtcblx0XHRcdFx0XHRcdGNsZWFyVGltZW91dCh0aGlzLl9zY2hlZHVsZWRUaW1lb3V0cy5nZXQoaWQpKTtcblx0XHRcdFx0XHRcdHRoaXMuX3NjaGVkdWxlZFRpbWVvdXRzLmRlbGV0ZShpZCk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgZ2V0UmFuZG9tRGF0YShyIFtdYnl0ZSlcblx0XHRcdFx0XHRcInJ1bnRpbWUuZ2V0UmFuZG9tRGF0YVwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobG9hZFNsaWNlKHNwICsgOCkpO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyBmdW5jIGZpbmFsaXplUmVmKHYgcmVmKVxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy5maW5hbGl6ZVJlZlwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNvbnN0IGlkID0gdGhpcy5tZW0uZ2V0VWludDMyKHNwICsgOCwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHR0aGlzLl9nb1JlZkNvdW50c1tpZF0tLTtcblx0XHRcdFx0XHRcdGlmICh0aGlzLl9nb1JlZkNvdW50c1tpZF0gPT09IDApIHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgdiA9IHRoaXMuX3ZhbHVlc1tpZF07XG5cdFx0XHRcdFx0XHRcdHRoaXMuX3ZhbHVlc1tpZF0gPSBudWxsO1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9pZHMuZGVsZXRlKHYpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9pZFBvb2wucHVzaChpZCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgc3RyaW5nVmFsKHZhbHVlIHN0cmluZykgcmVmXG5cdFx0XHRcdFx0XCJzeXNjYWxsL2pzLnN0cmluZ1ZhbFwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdHN0b3JlVmFsdWUoc3AgKyAyNCwgbG9hZFN0cmluZyhzcCArIDgpKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gZnVuYyB2YWx1ZUdldCh2IHJlZiwgcCBzdHJpbmcpIHJlZlxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy52YWx1ZUdldFwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuZ2V0KGxvYWRWYWx1ZShzcCArIDgpLCBsb2FkU3RyaW5nKHNwICsgMTYpKTtcblx0XHRcdFx0XHRcdHNwID0gdGhpcy5faW5zdC5leHBvcnRzLmdldHNwKCkgPj4+IDA7IC8vIHNlZSBjb21tZW50IGFib3ZlXG5cdFx0XHRcdFx0XHRzdG9yZVZhbHVlKHNwICsgMzIsIHJlc3VsdCk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgdmFsdWVTZXQodiByZWYsIHAgc3RyaW5nLCB4IHJlZilcblx0XHRcdFx0XHRcInN5c2NhbGwvanMudmFsdWVTZXRcIjogKHNwKSA9PiB7XG5cdFx0XHRcdFx0XHRzcCA+Pj49IDA7XG5cdFx0XHRcdFx0XHRSZWZsZWN0LnNldChsb2FkVmFsdWUoc3AgKyA4KSwgbG9hZFN0cmluZyhzcCArIDE2KSwgbG9hZFZhbHVlKHNwICsgMzIpKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gZnVuYyB2YWx1ZURlbGV0ZSh2IHJlZiwgcCBzdHJpbmcpXG5cdFx0XHRcdFx0XCJzeXNjYWxsL2pzLnZhbHVlRGVsZXRlXCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0UmVmbGVjdC5kZWxldGVQcm9wZXJ0eShsb2FkVmFsdWUoc3AgKyA4KSwgbG9hZFN0cmluZyhzcCArIDE2KSk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgdmFsdWVJbmRleCh2IHJlZiwgaSBpbnQpIHJlZlxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy52YWx1ZUluZGV4XCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0c3RvcmVWYWx1ZShzcCArIDI0LCBSZWZsZWN0LmdldChsb2FkVmFsdWUoc3AgKyA4KSwgZ2V0SW50NjQoc3AgKyAxNikpKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gdmFsdWVTZXRJbmRleCh2IHJlZiwgaSBpbnQsIHggcmVmKVxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy52YWx1ZVNldEluZGV4XCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0UmVmbGVjdC5zZXQobG9hZFZhbHVlKHNwICsgOCksIGdldEludDY0KHNwICsgMTYpLCBsb2FkVmFsdWUoc3AgKyAyNCkpO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyBmdW5jIHZhbHVlQ2FsbCh2IHJlZiwgbSBzdHJpbmcsIGFyZ3MgW11yZWYpIChyZWYsIGJvb2wpXG5cdFx0XHRcdFx0XCJzeXNjYWxsL2pzLnZhbHVlQ2FsbFwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHYgPSBsb2FkVmFsdWUoc3AgKyA4KTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgbSA9IFJlZmxlY3QuZ2V0KHYsIGxvYWRTdHJpbmcoc3AgKyAxNikpO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBhcmdzID0gbG9hZFNsaWNlT2ZWYWx1ZXMoc3AgKyAzMik7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuYXBwbHkobSwgdiwgYXJncyk7XG5cdFx0XHRcdFx0XHRcdHNwID0gdGhpcy5faW5zdC5leHBvcnRzLmdldHNwKCkgPj4+IDA7IC8vIHNlZSBjb21tZW50IGFib3ZlXG5cdFx0XHRcdFx0XHRcdHN0b3JlVmFsdWUoc3AgKyA1NiwgcmVzdWx0KTtcblx0XHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDgoc3AgKyA2NCwgMSk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRcdFx0c3AgPSB0aGlzLl9pbnN0LmV4cG9ydHMuZ2V0c3AoKSA+Pj4gMDsgLy8gc2VlIGNvbW1lbnQgYWJvdmVcblx0XHRcdFx0XHRcdFx0c3RvcmVWYWx1ZShzcCArIDU2LCBlcnIpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50OChzcCArIDY0LCAwKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gZnVuYyB2YWx1ZUludm9rZSh2IHJlZiwgYXJncyBbXXJlZikgKHJlZiwgYm9vbClcblx0XHRcdFx0XHRcInN5c2NhbGwvanMudmFsdWVJbnZva2VcIjogKHNwKSA9PiB7XG5cdFx0XHRcdFx0XHRzcCA+Pj49IDA7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRjb25zdCB2ID0gbG9hZFZhbHVlKHNwICsgOCk7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGFyZ3MgPSBsb2FkU2xpY2VPZlZhbHVlcyhzcCArIDE2KTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgcmVzdWx0ID0gUmVmbGVjdC5hcHBseSh2LCB1bmRlZmluZWQsIGFyZ3MpO1xuXHRcdFx0XHRcdFx0XHRzcCA9IHRoaXMuX2luc3QuZXhwb3J0cy5nZXRzcCgpID4+PiAwOyAvLyBzZWUgY29tbWVudCBhYm92ZVxuXHRcdFx0XHRcdFx0XHRzdG9yZVZhbHVlKHNwICsgNDAsIHJlc3VsdCk7XG5cdFx0XHRcdFx0XHRcdHRoaXMubWVtLnNldFVpbnQ4KHNwICsgNDgsIDEpO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdHNwID0gdGhpcy5faW5zdC5leHBvcnRzLmdldHNwKCkgPj4+IDA7IC8vIHNlZSBjb21tZW50IGFib3ZlXG5cdFx0XHRcdFx0XHRcdHN0b3JlVmFsdWUoc3AgKyA0MCwgZXJyKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDgoc3AgKyA0OCwgMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgdmFsdWVOZXcodiByZWYsIGFyZ3MgW11yZWYpIChyZWYsIGJvb2wpXG5cdFx0XHRcdFx0XCJzeXNjYWxsL2pzLnZhbHVlTmV3XCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgdiA9IGxvYWRWYWx1ZShzcCArIDgpO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBhcmdzID0gbG9hZFNsaWNlT2ZWYWx1ZXMoc3AgKyAxNik7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KHYsIGFyZ3MpO1xuXHRcdFx0XHRcdFx0XHRzcCA9IHRoaXMuX2luc3QuZXhwb3J0cy5nZXRzcCgpID4+PiAwOyAvLyBzZWUgY29tbWVudCBhYm92ZVxuXHRcdFx0XHRcdFx0XHRzdG9yZVZhbHVlKHNwICsgNDAsIHJlc3VsdCk7XG5cdFx0XHRcdFx0XHRcdHRoaXMubWVtLnNldFVpbnQ4KHNwICsgNDgsIDEpO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdHNwID0gdGhpcy5faW5zdC5leHBvcnRzLmdldHNwKCkgPj4+IDA7IC8vIHNlZSBjb21tZW50IGFib3ZlXG5cdFx0XHRcdFx0XHRcdHN0b3JlVmFsdWUoc3AgKyA0MCwgZXJyKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDgoc3AgKyA0OCwgMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgdmFsdWVMZW5ndGgodiByZWYpIGludFxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy52YWx1ZUxlbmd0aFwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdHNldEludDY0KHNwICsgMTYsIHBhcnNlSW50KGxvYWRWYWx1ZShzcCArIDgpLmxlbmd0aCkpO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyB2YWx1ZVByZXBhcmVTdHJpbmcodiByZWYpIChyZWYsIGludClcblx0XHRcdFx0XHRcInN5c2NhbGwvanMudmFsdWVQcmVwYXJlU3RyaW5nXCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0Y29uc3Qgc3RyID0gZW5jb2Rlci5lbmNvZGUoU3RyaW5nKGxvYWRWYWx1ZShzcCArIDgpKSk7XG5cdFx0XHRcdFx0XHRzdG9yZVZhbHVlKHNwICsgMTYsIHN0cik7XG5cdFx0XHRcdFx0XHRzZXRJbnQ2NChzcCArIDI0LCBzdHIubGVuZ3RoKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gdmFsdWVMb2FkU3RyaW5nKHYgcmVmLCBiIFtdYnl0ZSlcblx0XHRcdFx0XHRcInN5c2NhbGwvanMudmFsdWVMb2FkU3RyaW5nXCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0Y29uc3Qgc3RyID0gbG9hZFZhbHVlKHNwICsgOCk7XG5cdFx0XHRcdFx0XHRsb2FkU2xpY2Uoc3AgKyAxNikuc2V0KHN0cik7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgdmFsdWVJbnN0YW5jZU9mKHYgcmVmLCB0IHJlZikgYm9vbFxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy52YWx1ZUluc3RhbmNlT2ZcIjogKHNwKSA9PiB7XG5cdFx0XHRcdFx0XHRzcCA+Pj49IDA7XG5cdFx0XHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50OChzcCArIDI0LCAobG9hZFZhbHVlKHNwICsgOCkgaW5zdGFuY2VvZiBsb2FkVmFsdWUoc3AgKyAxNikpID8gMSA6IDApO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyBmdW5jIGNvcHlCeXRlc1RvR28oZHN0IFtdYnl0ZSwgc3JjIHJlZikgKGludCwgYm9vbClcblx0XHRcdFx0XHRcInN5c2NhbGwvanMuY29weUJ5dGVzVG9Hb1wiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNvbnN0IGRzdCA9IGxvYWRTbGljZShzcCArIDgpO1xuXHRcdFx0XHRcdFx0Y29uc3Qgc3JjID0gbG9hZFZhbHVlKHNwICsgMzIpO1xuXHRcdFx0XHRcdFx0aWYgKCEoc3JjIGluc3RhbmNlb2YgVWludDhBcnJheSB8fCBzcmMgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheSkpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDgoc3AgKyA0OCwgMCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGNvbnN0IHRvQ29weSA9IHNyYy5zdWJhcnJheSgwLCBkc3QubGVuZ3RoKTtcblx0XHRcdFx0XHRcdGRzdC5zZXQodG9Db3B5KTtcblx0XHRcdFx0XHRcdHNldEludDY0KHNwICsgNDAsIHRvQ29weS5sZW5ndGgpO1xuXHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDgoc3AgKyA0OCwgMSk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgY29weUJ5dGVzVG9KUyhkc3QgcmVmLCBzcmMgW11ieXRlKSAoaW50LCBib29sKVxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy5jb3B5Qnl0ZXNUb0pTXCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0Y29uc3QgZHN0ID0gbG9hZFZhbHVlKHNwICsgOCk7XG5cdFx0XHRcdFx0XHRjb25zdCBzcmMgPSBsb2FkU2xpY2Uoc3AgKyAxNik7XG5cdFx0XHRcdFx0XHRpZiAoIShkc3QgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8IGRzdCBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5KSkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50OChzcCArIDQ4LCAwKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y29uc3QgdG9Db3B5ID0gc3JjLnN1YmFycmF5KDAsIGRzdC5sZW5ndGgpO1xuXHRcdFx0XHRcdFx0ZHN0LnNldCh0b0NvcHkpO1xuXHRcdFx0XHRcdFx0c2V0SW50NjQoc3AgKyA0MCwgdG9Db3B5Lmxlbmd0aCk7XG5cdFx0XHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50OChzcCArIDQ4LCAxKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XCJkZWJ1Z1wiOiAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKHZhbHVlKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGFzeW5jIHJ1bihpbnN0YW5jZSkge1xuXHRcdFx0aWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBXZWJBc3NlbWJseS5JbnN0YW5jZSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiR28ucnVuOiBXZWJBc3NlbWJseS5JbnN0YW5jZSBleHBlY3RlZFwiKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2luc3QgPSBpbnN0YW5jZTtcblx0XHRcdHRoaXMubWVtID0gbmV3IERhdGFWaWV3KHRoaXMuX2luc3QuZXhwb3J0cy5tZW0uYnVmZmVyKTtcblx0XHRcdHRoaXMuX3ZhbHVlcyA9IFsgLy8gSlMgdmFsdWVzIHRoYXQgR28gY3VycmVudGx5IGhhcyByZWZlcmVuY2VzIHRvLCBpbmRleGVkIGJ5IHJlZmVyZW5jZSBpZFxuXHRcdFx0XHROYU4sXG5cdFx0XHRcdDAsXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdHRydWUsXG5cdFx0XHRcdGZhbHNlLFxuXHRcdFx0XHRnbG9iYWwsXG5cdFx0XHRcdHRoaXMsXG5cdFx0XHRdO1xuXHRcdFx0dGhpcy5fZ29SZWZDb3VudHMgPSBuZXcgQXJyYXkodGhpcy5fdmFsdWVzLmxlbmd0aCkuZmlsbChJbmZpbml0eSk7IC8vIG51bWJlciBvZiByZWZlcmVuY2VzIHRoYXQgR28gaGFzIHRvIGEgSlMgdmFsdWUsIGluZGV4ZWQgYnkgcmVmZXJlbmNlIGlkXG5cdFx0XHR0aGlzLl9pZHMgPSBuZXcgTWFwKFsgLy8gbWFwcGluZyBmcm9tIEpTIHZhbHVlcyB0byByZWZlcmVuY2UgaWRzXG5cdFx0XHRcdFswLCAxXSxcblx0XHRcdFx0W251bGwsIDJdLFxuXHRcdFx0XHRbdHJ1ZSwgM10sXG5cdFx0XHRcdFtmYWxzZSwgNF0sXG5cdFx0XHRcdFtnbG9iYWwsIDVdLFxuXHRcdFx0XHRbdGhpcywgNl0sXG5cdFx0XHRdKTtcblx0XHRcdHRoaXMuX2lkUG9vbCA9IFtdOyAgIC8vIHVudXNlZCBpZHMgdGhhdCBoYXZlIGJlZW4gZ2FyYmFnZSBjb2xsZWN0ZWRcblx0XHRcdHRoaXMuZXhpdGVkID0gZmFsc2U7IC8vIHdoZXRoZXIgdGhlIEdvIHByb2dyYW0gaGFzIGV4aXRlZFxuXG5cdFx0XHQvLyBQYXNzIGNvbW1hbmQgbGluZSBhcmd1bWVudHMgYW5kIGVudmlyb25tZW50IHZhcmlhYmxlcyB0byBXZWJBc3NlbWJseSBieSB3cml0aW5nIHRoZW0gdG8gdGhlIGxpbmVhciBtZW1vcnkuXG5cdFx0XHRsZXQgb2Zmc2V0ID0gNDA5NjtcblxuXHRcdFx0Y29uc3Qgc3RyUHRyID0gKHN0cikgPT4ge1xuXHRcdFx0XHRjb25zdCBwdHIgPSBvZmZzZXQ7XG5cdFx0XHRcdGNvbnN0IGJ5dGVzID0gZW5jb2Rlci5lbmNvZGUoc3RyICsgXCJcXDBcIik7XG5cdFx0XHRcdG5ldyBVaW50OEFycmF5KHRoaXMubWVtLmJ1ZmZlciwgb2Zmc2V0LCBieXRlcy5sZW5ndGgpLnNldChieXRlcyk7XG5cdFx0XHRcdG9mZnNldCArPSBieXRlcy5sZW5ndGg7XG5cdFx0XHRcdGlmIChvZmZzZXQgJSA4ICE9PSAwKSB7XG5cdFx0XHRcdFx0b2Zmc2V0ICs9IDggLSAob2Zmc2V0ICUgOCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHB0cjtcblx0XHRcdH07XG5cblx0XHRcdGNvbnN0IGFyZ2MgPSB0aGlzLmFyZ3YubGVuZ3RoO1xuXG5cdFx0XHRjb25zdCBhcmd2UHRycyA9IFtdO1xuXHRcdFx0dGhpcy5hcmd2LmZvckVhY2goKGFyZykgPT4ge1xuXHRcdFx0XHRhcmd2UHRycy5wdXNoKHN0clB0cihhcmcpKTtcblx0XHRcdH0pO1xuXHRcdFx0YXJndlB0cnMucHVzaCgwKTtcblxuXHRcdFx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuZW52KS5zb3J0KCk7XG5cdFx0XHRrZXlzLmZvckVhY2goKGtleSkgPT4ge1xuXHRcdFx0XHRhcmd2UHRycy5wdXNoKHN0clB0cihgJHtrZXl9PSR7dGhpcy5lbnZba2V5XX1gKSk7XG5cdFx0XHR9KTtcblx0XHRcdGFyZ3ZQdHJzLnB1c2goMCk7XG5cblx0XHRcdGNvbnN0IGFyZ3YgPSBvZmZzZXQ7XG5cdFx0XHRhcmd2UHRycy5mb3JFYWNoKChwdHIpID0+IHtcblx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDMyKG9mZnNldCwgcHRyLCB0cnVlKTtcblx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDMyKG9mZnNldCArIDQsIDAsIHRydWUpO1xuXHRcdFx0XHRvZmZzZXQgKz0gODtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBUaGUgbGlua2VyIGd1YXJhbnRlZXMgZ2xvYmFsIGRhdGEgc3RhcnRzIGZyb20gYXQgbGVhc3Qgd2FzbU1pbkRhdGFBZGRyLlxuXHRcdFx0Ly8gS2VlcCBpbiBzeW5jIHdpdGggY21kL2xpbmsvaW50ZXJuYWwvbGQvZGF0YS5nbzp3YXNtTWluRGF0YUFkZHIuXG5cdFx0XHRjb25zdCB3YXNtTWluRGF0YUFkZHIgPSA0MDk2ICsgODE5Mjtcblx0XHRcdGlmIChvZmZzZXQgPj0gd2FzbU1pbkRhdGFBZGRyKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcInRvdGFsIGxlbmd0aCBvZiBjb21tYW5kIGxpbmUgYW5kIGVudmlyb25tZW50IHZhcmlhYmxlcyBleGNlZWRzIGxpbWl0XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9pbnN0LmV4cG9ydHMucnVuKGFyZ2MsIGFyZ3YpO1xuXHRcdFx0aWYgKHRoaXMuZXhpdGVkKSB7XG5cdFx0XHRcdHRoaXMuX3Jlc29sdmVFeGl0UHJvbWlzZSgpO1xuXHRcdFx0fVxuXHRcdFx0YXdhaXQgdGhpcy5fZXhpdFByb21pc2U7XG5cdFx0fVxuXG5cdFx0X3Jlc3VtZSgpIHtcblx0XHRcdGlmICh0aGlzLmV4aXRlZCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJHbyBwcm9ncmFtIGhhcyBhbHJlYWR5IGV4aXRlZFwiKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2luc3QuZXhwb3J0cy5yZXN1bWUoKTtcblx0XHRcdGlmICh0aGlzLmV4aXRlZCkge1xuXHRcdFx0XHR0aGlzLl9yZXNvbHZlRXhpdFByb21pc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRfbWFrZUZ1bmNXcmFwcGVyKGlkKSB7XG5cdFx0XHRjb25zdCBnbyA9IHRoaXM7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRjb25zdCBldmVudCA9IHsgaWQ6IGlkLCB0aGlzOiB0aGlzLCBhcmdzOiBhcmd1bWVudHMgfTtcblx0XHRcdFx0Z28uX3BlbmRpbmdFdmVudCA9IGV2ZW50O1xuXHRcdFx0XHRnby5fcmVzdW1lKCk7XG5cdFx0XHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdFx0XHR9O1xuXHRcdH1cblx0fVxuXG5cdGlmIChcblx0XHR0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0Z2xvYmFsLnJlcXVpcmUgJiZcblx0XHRnbG9iYWwucmVxdWlyZS5tYWluID09PSBtb2R1bGUgJiZcblx0XHRnbG9iYWwucHJvY2VzcyAmJlxuXHRcdGdsb2JhbC5wcm9jZXNzLnZlcnNpb25zICYmXG5cdFx0IWdsb2JhbC5wcm9jZXNzLnZlcnNpb25zLmVsZWN0cm9uXG5cdCkge1xuXHRcdGlmIChwcm9jZXNzLmFyZ3YubGVuZ3RoIDwgMykge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcInVzYWdlOiBnb19qc193YXNtX2V4ZWMgW3dhc20gYmluYXJ5XSBbYXJndW1lbnRzXVwiKTtcblx0XHRcdHByb2Nlc3MuZXhpdCgxKTtcblx0XHR9XG5cblx0XHRjb25zdCBnbyA9IG5ldyBHbygpO1xuXHRcdGdvLmFyZ3YgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG5cdFx0Z28uZW52ID0gT2JqZWN0LmFzc2lnbih7IFRNUERJUjogcmVxdWlyZShcIm9zXCIpLnRtcGRpcigpIH0sIHByb2Nlc3MuZW52KTtcblx0XHRnby5leGl0ID0gcHJvY2Vzcy5leGl0O1xuXHRcdFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGZzLnJlYWRGaWxlU3luYyhwcm9jZXNzLmFyZ3ZbMl0pLCBnby5pbXBvcnRPYmplY3QpLnRoZW4oKHJlc3VsdCkgPT4ge1xuXHRcdFx0cHJvY2Vzcy5vbihcImV4aXRcIiwgKGNvZGUpID0+IHsgLy8gTm9kZS5qcyBleGl0cyBpZiBubyBldmVudCBoYW5kbGVyIGlzIHBlbmRpbmdcblx0XHRcdFx0aWYgKGNvZGUgPT09IDAgJiYgIWdvLmV4aXRlZCkge1xuXHRcdFx0XHRcdC8vIGRlYWRsb2NrLCBtYWtlIEdvIHByaW50IGVycm9yIGFuZCBzdGFjayB0cmFjZXNcblx0XHRcdFx0XHRnby5fcGVuZGluZ0V2ZW50ID0geyBpZDogMCB9O1xuXHRcdFx0XHRcdGdvLl9yZXN1bWUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gZ28ucnVuKHJlc3VsdC5pbnN0YW5jZSk7XG5cdFx0fSkuY2F0Y2goKGVycikgPT4ge1xuXHRcdFx0Y29uc29sZS5lcnJvcihlcnIpO1xuXHRcdFx0cHJvY2Vzcy5leGl0KDEpO1xuXHRcdH0pO1xuXHR9XG59KSgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBtb25hY287IiwiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tIFwiZXZlbnRzXCI7XG5cbmV4cG9ydCBjb25zdCBFdmVudEJ1cyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuZXhwb3J0IGNvbnN0IEVWRU5UX1dBU01fUkVBRFkgPSBcIndhc21fcmVhZHlcIjtcbiIsImZ1bmN0aW9uIHdlYnBhY2tFbXB0eUNvbnRleHQocmVxKSB7XG5cdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHR0aHJvdyBlO1xufVxud2VicGFja0VtcHR5Q29udGV4dC5rZXlzID0gZnVuY3Rpb24oKSB7IHJldHVybiBbXTsgfTtcbndlYnBhY2tFbXB0eUNvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tFbXB0eUNvbnRleHQ7XG53ZWJwYWNrRW1wdHlDb250ZXh0LmlkID0gXCI0ZmU0XCI7IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse2F0dHJzOntcImlkXCI6XCJhcHBcIn19LFtfYygnZGl2Jyx7YXR0cnM6e1wiaWRcIjpcIm5hdlwifX0sW19jKCdkaXYnLHthdHRyczp7XCJpZFwiOlwidGl0bGVcIn19LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJpbm5lclwifSxbX2MoJ1ZEcm9wZG93bicse3Njb3BlZFNsb3RzOl92bS5fdShbe2tleTpcInBvcHBlclwiLGZuOmZ1bmN0aW9uKCl7cmV0dXJuIFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJkZXNjXCJ9LFtfYygncCcsW19jKCdhJyx7YXR0cnM6e1wiaHJlZlwiOlwiaHR0cHM6Ly9naXRodWIuY29tL2hzaWFvc2l5dWFuMC9tb2xlXCIsXCJ0YXJnZXRcIjpcIl9ibGFua1wifX0sW192bS5fdihcIk1vbGVcIildKSxfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgaXMgYSB0b29sa2l0IHdyaXR0ZW4gaW4gR29sYW5nIHByb3ZpZGVzIHZhcmlvdXNcXG4gICAgICAgICAgICAgICAgZnVuY3Rpb25hbGl0aWVzIHRvIHByb2Nlc3Mgc291cmNlIGNvZGUgb2YgdGhlIGZyb250ZW5kXFxuICAgICAgICAgICAgICAgIHByb2plY3RzLlxcbiAgICAgICAgICAgICAgXCIpXSksX2MoJ3AnLFtfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgVGhpcyBwYWdlIGlzIGZvciBkZW1vbnN0cmF0aW5nIHRoZSBKYXZhU2NyaXB0IFBhcnNlciBzaGlwcGVkXFxuICAgICAgICAgICAgICAgIHdpdGhpbiBNb2xlIHdoaWNoIGlzIHJ1bm5pbmcgZGlyZWN0bHkgaW4gdGhpcyBwYWdlIGJhc2Ugb25cXG4gICAgICAgICAgICAgICAgV0FTTS5cXG4gICAgICAgICAgICAgIFwiKV0pLF9jKCdwJyxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgICAgIFBhc3RlIHlvdXIgSmF2YVNjcmlwdCBjb2RlIGluIGxlZnQgcGFuZWwgYW5kIHNlZSBpdHMgQVNUIGluXFxuICAgICAgICAgICAgICAgIHJpZ2h0IHBhbmVsLlxcbiAgICAgICAgICAgICAgXCIpXSksX2MoJ3AnLFtfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgVGhpcyBpcyB0aGVcXG4gICAgICAgICAgICAgICAgXCIpLF9jKCdhJyx7YXR0cnM6e1wiaHJlZlwiOlwiaHR0cHM6Ly9naXRodWIuY29tL2hzaWFvc2l5dWFuMC9tb2xlLWlzLW1vcmVcIixcInRhcmdldFwiOlwiX2JsYW5rXCJ9fSxbX3ZtLl92KFwic291cmNlIGNvZGVcIildKSxfdm0uX3YoXCIgb2YgdGhpcyBjcmFmdCwgaWYgeW91J3JlIGludGVyZXN0ZWQgaW4gd2hhdCBoYXBwZW5zIGludGVybmFsbHkgOilcXG4gICAgICAgICAgICAgIFwiKV0pXSldfSxwcm94eTp0cnVlfV0pfSxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcIm1hcmtcIn0sW192bS5fdihcIj9cIildKV0pXSwxKV0pXSksX2MoJ3JvdXRlci12aWV3JyksX2MoJ25vdGlmaWNhdGlvbnMnLHthdHRyczp7XCJwb3NpdGlvblwiOlwiYm90dG9tIHJpZ2h0XCJ9fSldLDEpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NWFjZDVlNDMmXCJcbnZhciBzY3JpcHQgPSB7fVxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1jc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCBWdWUgZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwidnVlLXJvdXRlclwiO1xuXG5WdWUudXNlKFJvdXRlcik7XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBSb3V0ZXIoe1xuICByb3V0ZXM6IFtcbiAgICB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIG5hbWU6IFwiYXN0XCIsXG4gICAgICBjb21wb25lbnQ6ICgpID0+XG4gICAgICAgIGltcG9ydCgvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcImFzdFwiICovIFwiLi92aWV3cy9BU1QudnVlXCIpXG4gICAgfVxuICBdXG59KTtcbiIsImltcG9ydCBWdWUgZnJvbSAndnVlJ1xuaW1wb3J0IFZ1ZXggZnJvbSAndnVleCdcblxuVnVlLnVzZShWdWV4KVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgVnVleC5TdG9yZSh7XG4gIHN0YXRlOiB7XG5cbiAgfSxcbiAgbXV0YXRpb25zOiB7XG5cbiAgfSxcbiAgYWN0aW9uczoge1xuXG4gIH1cbn0pXG4iLCJpbXBvcnQgVnVlIGZyb20gXCJ2dWVcIjtcbmltcG9ydCBWVG9vbHRpcCBmcm9tIFwidi10b29sdGlwXCI7XG5pbXBvcnQgVnVlQ2xpcGJvYXJkIGZyb20gXCJ2dWUtY2xpcGJvYXJkMlwiO1xuaW1wb3J0IE5vdGlmaWNhdGlvbnMgZnJvbSBcInZ1ZS1ub3RpZmljYXRpb25cIjtcbmltcG9ydCB7IEV2ZW50QnVzLCBFVkVOVF9XQVNNX1JFQURZIH0gZnJvbSBcIi4vZXZlbnRcIjtcbmltcG9ydCBBcHAgZnJvbSBcIi4vQXBwLnZ1ZVwiO1xuaW1wb3J0IHJvdXRlciBmcm9tIFwiLi9yb3V0ZXJcIjtcbmltcG9ydCBzdG9yZSBmcm9tIFwiLi9zdG9yZVwiO1xuaW1wb3J0IFwiLi93YXNtX2V4ZWNcIjtcblxuaW1wb3J0IFwidi10b29sdGlwL2Rpc3Qvdi10b29sdGlwLmNzc1wiO1xuXG5WdWUuY29uZmlnLnByb2R1Y3Rpb25UaXAgPSBmYWxzZTtcblxuVnVlLnVzZShWVG9vbHRpcCk7XG5WdWUudXNlKFZ1ZUNsaXBib2FyZCk7XG5WdWUudXNlKE5vdGlmaWNhdGlvbnMpO1xuXG53aW5kb3cucmVxdWlyZS5jb25maWcoe1xuICBwYXRoczoge1xuICAgIHZzOiBcImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL21vbmFjby1lZGl0b3IvMC4xNy4wL21pbi92c1wiLFxuICB9LFxufSk7XG5cbi8vIEJlZm9yZSBsb2FkaW5nIHZzL2VkaXRvci9lZGl0b3IubWFpbiwgZGVmaW5lIGEgZ2xvYmFsIE1vbmFjb0Vudmlyb25tZW50IHRoYXQgb3ZlcndyaXRlc1xuLy8gdGhlIGRlZmF1bHQgd29ya2VyIHVybCBsb2NhdGlvbiAodXNlZCB3aGVuIGNyZWF0aW5nIFdlYldvcmtlcnMpLiBUaGUgcHJvYmxlbSBoZXJlIGlzIHRoYXRcbi8vIEhUTUw1IGRvZXMgbm90IGFsbG93IGNyb3NzLWRvbWFpbiB3ZWIgd29ya2Vycywgc28gd2UgbmVlZCB0byBwcm94eSB0aGUgaW5zdGFudGlhdGlvbiBvZlxuLy8gYSB3ZWIgd29ya2VyIHRocm91Z2ggYSBzYW1lLWRvbWFpbiBzY3JpcHRcbndpbmRvdy5Nb25hY29FbnZpcm9ubWVudCA9IHtcbiAgZ2V0V29ya2VyVXJsOiBmdW5jdGlvbiAod29ya2VySWQsIGxhYmVsKSB7XG4gICAgcmV0dXJuIGBkYXRhOnRleHQvamF2YXNjcmlwdDtjaGFyc2V0PXV0Zi04LCR7ZW5jb2RlVVJJQ29tcG9uZW50KGBcbiAgc2VsZi5Nb25hY29FbnZpcm9ubWVudCA9IHtcbiAgICBiYXNlVXJsOiAnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbW9uYWNvLWVkaXRvci8wLjE3LjAvbWluLydcbiAgfTtcbiAgaW1wb3J0U2NyaXB0cygnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbW9uYWNvLWVkaXRvci8wLjE3LjAvbWluL3ZzL2Jhc2Uvd29ya2VyL3dvcmtlck1haW4uanMnKTtgKX1gO1xuICB9LFxufTtcblxud2luZG93LnJlcXVpcmUoW1widnMvZWRpdG9yL2VkaXRvci5tYWluXCJdLCBmdW5jdGlvbiAoKSB7XG4gIG1vbmFjby5sYW5ndWFnZXMudHlwZXNjcmlwdC50eXBlc2NyaXB0RGVmYXVsdHMuc2V0RGlhZ25vc3RpY3NPcHRpb25zKHtcbiAgICBub1NlbWFudGljVmFsaWRhdGlvbjogZmFsc2UsXG4gICAgbm9TeW50YXhWYWxpZGF0aW9uOiBmYWxzZSxcbiAgfSk7XG5cbiAgbW9uYWNvLmxhbmd1YWdlcy50eXBlc2NyaXB0LnR5cGVzY3JpcHREZWZhdWx0cy5zZXRDb21waWxlck9wdGlvbnMoe1xuICAgIHRhcmdldDogbW9uYWNvLmxhbmd1YWdlcy50eXBlc2NyaXB0LlNjcmlwdFRhcmdldC5MYXRlc3QsXG4gICAgYWxsb3dOb25Uc0V4dGVuc2lvbnM6IHRydWUsXG4gICAgbW9kdWxlUmVzb2x1dGlvbjogbW9uYWNvLmxhbmd1YWdlcy50eXBlc2NyaXB0Lk1vZHVsZVJlc29sdXRpb25LaW5kLk5vZGVKcyxcbiAgICBtb2R1bGU6IG1vbmFjby5sYW5ndWFnZXMudHlwZXNjcmlwdC5Nb2R1bGVLaW5kLkNvbW1vbkpTLFxuICAgIG5vRW1pdDogdHJ1ZSxcbiAgICBlc01vZHVsZUludGVyb3A6IHRydWUsXG4gICAganN4OiBtb25hY28ubGFuZ3VhZ2VzLnR5cGVzY3JpcHQuSnN4RW1pdC5SZWFjdCxcbiAgICByZWFjdE5hbWVzcGFjZTogXCJSZWFjdFwiLFxuICAgIGFsbG93SnM6IHRydWUsXG4gIH0pO1xuXG4gIG5ldyBWdWUoe1xuICAgIHJvdXRlcixcbiAgICBzdG9yZSxcbiAgICByZW5kZXI6IChoKSA9PiBoKEFwcCksXG4gIH0pLiRtb3VudChcIiNhcHBcIik7XG59KTtcblxuKGFzeW5jICgpID0+IHtcbiAgY29uc3QgZ28gPSBuZXcgR28oKTtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICBcImh0dHBzOi8vYmxvZy50aGVoYXJkd2F5cy5tZS9tb2xlLWlzLW1vcmUvYXNzZXRzL21vbGUud2FzbVwiXG4gICk7XG4gIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gIGNvbnN0IG1vZCA9IGF3YWl0IFdlYkFzc2VtYmx5LmNvbXBpbGUoYnVmZmVyKTtcbiAgY29uc3QgaW5zdCA9IGF3YWl0IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKG1vZCwgZ28uaW1wb3J0T2JqZWN0KTtcblxuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBFdmVudEJ1cy5lbWl0KEVWRU5UX1dBU01fUkVBRFkpO1xuICB9LCAzMDApO1xuXG4gIGF3YWl0IGdvLnJ1bihpbnN0KTtcbn0pKCk7XG4iXSwic291cmNlUm9vdCI6IiJ9