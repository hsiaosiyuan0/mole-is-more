(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["ast"],{"059c":function(e,t,n){"use strict";var o=n("600f"),r=n.n(o),i={name:"MonacoEditor",props:{value:String,theme:{type:String,default:"vs"},language:String,options:Object,amdRequire:{type:Function}},model:{event:"change"},watch:{options:{deep:!0,handler:function(e){this.editor&&this.editor.updateOptions(e)}},value:function(e){this.editor&&e!==this.editor.getValue()&&this.editor.setValue(e)},language:function(e){this.editor&&window.monaco.editor.setModelLanguage(this.editor.getModel(),e)},theme:function(e){this.editor&&window.monaco.editor.setTheme(e)}},mounted:function(){var e=this;if(this.amdRequire)this.amdRequire(["vs/editor/editor.main"],(function(){e.initMonaco(window.monaco)}));else{var t=n("2364");this.initMonaco(t)}},beforeDestroy:function(){this.editor&&this.editor.dispose()},methods:{initMonaco:function(e){var t=this,n=r()({value:this.value,theme:this.theme,language:this.language},this.options);this.editor=e.editor.create(this.$el,n),this.$emit("editorDidMount",this.editor),this.editor.onContextMenu((function(e){return t.$emit("contextMenu",e)})),this.editor.onDidBlurEditorWidget((function(){return t.$emit("blur")})),this.editor.onDidBlurEditorText((function(){return t.$emit("blurText")})),this.editor.onDidChangeConfiguration((function(e){return t.$emit("configuration",e)})),this.editor.onDidChangeCursorPosition((function(e){return t.$emit("position",e)})),this.editor.onDidChangeCursorSelection((function(e){return t.$emit("selection",e)})),this.editor.onDidChangeModel((function(e){return t.$emit("model",e)})),this.editor.onDidChangeModelContent((function(e){var n=t.editor.getValue();t.value!==n&&t.$emit("change",n,e)})),this.editor.onDidChangeModelDecorations((function(e){return t.$emit("modelDecorations",e)})),this.editor.onDidChangeModelLanguage((function(e){return t.$emit("modelLanguage",e)})),this.editor.onDidChangeModelOptions((function(e){return t.$emit("modelOptions",e)})),this.editor.onDidDispose((function(e){return t.$emit("afterDispose",e)})),this.editor.onDidFocusEditorWidget((function(){return t.$emit("focus")})),this.editor.onDidFocusEditorText((function(){return t.$emit("focusText")})),this.editor.onDidLayoutChange((function(e){return t.$emit("layout",e)})),this.editor.onDidScrollChange((function(e){return t.$emit("scroll",e)})),this.editor.onKeyDown((function(e){return t.$emit("keydown",e)})),this.editor.onKeyUp((function(e){return t.$emit("keyup",e)})),this.editor.onMouseDown((function(e){return t.$emit("mouseDown",e)})),this.editor.onMouseLeave((function(e){return t.$emit("mouseLeave",e)})),this.editor.onMouseMove((function(e){return t.$emit("mouseMove",e)})),this.editor.onMouseUp((function(e){return t.$emit("mouseUp",e)}))},getMonaco:function(){return this.editor},focus:function(){this.editor.focus()}},render:function(e){return e("div")}};"undefined"!==typeof window&&window.Vue&&window.Vue.component(i.name,i),t["a"]=i},"0bfb":function(e,t,n){"use strict";var o=n("cb7c");e.exports=function(){var e=o(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},"2caf":function(e,t,n){var o=n("5ca1");o(o.S,"Array",{isArray:n("1169")})},3704:function(e,t,n){"use strict";(function(e){n("9865"),n("57e7"),n("f3e2"),n("2caf"),n("6b54"),n("87b3"),n("ac6a"),n("456d"),n("6d67");var o=n("75fc"),r=n("768b"),i=n("059c"),a=n("733a"),s=n.n(a),c=n("c832"),l=n.n(c),u=n("402a"),d=n("6058");n("e6c2");function h(e,t){var n=t.indexOf(".");t=t.slice(n+1);var o=l()(e,t);return o&&o.loc?o:(n=t.lastIndexOf("."),t=t.slice(0,n),l()(e,t))}t["a"]={data:function(){return{editorCfg:{minimap:{enabled:!1},fontSize:"14px"},code:"",ast:null,error:"",collapsePath:/loc/,editor:null,prevDecorations:[{range:new monaco.Range(0,0,0,0),options:{}}],selected:[]}},watch:{code:function(e){this.compile(e)}},methods:{amdRequire:window.require,compile:function(t){if(e.compile){var n=e.compile(t),o=Object(r["a"])(n,2),i=o[0],a=o[1];a?this.error=a:(this.error="",this.ast=JSON.parse(i))}},handleAstClick:function(e){if(this.selected=[],this.editor){var t=h(this.ast,e);if(t&&t.loc){var n=t.loc,o=n.start,r=n.end,i=[{range:new monaco.Range(o.line,o.column+1,r.line,r.column+1),options:{isWholeLine:!1,className:"hg"}}];this.prevDecorations=this.editor.deltaDecorations(this.prevDecorations.slice(0),i)}}},editorDidMount:function(e){this.editor=e,this.editor.onMouseDown(this.handleEditorClick)},copy:function(){var e=this;this.$copyText(JSON.stringify(this.ast)).then((function(){e.$notify({type:"success",text:"copied"})}),(function(t){e.$notify({type:"error",text:"failed to copy: "+t})}))},handleEditorClick:function(e){var t=this;if(this.ast){this.prevDecorations=this.editor.deltaDecorations(this.prevDecorations.slice(0),[]);var n=e.target.position,r=n.lineNumber,i=n.column,a=null,s="";Object(d["a"])(this.ast,(function(e,t){if(e.loc){var n=e.loc,o=n.start,c=n.end,l=r>=o.line&&i>=o.column+1&&r<=c.line&&i<=c.column+1;return l&&(a=e,s=t),!0}}),"root"),a&&function(){var e=[{node:a,path:s}],n=[],r=function(){var t=e.pop(),r=t.node,i=t.path,a=Object.keys(r).map((function(t){var o=r[t],a="".concat(i,".").concat(t);return"[object Object]"===Object.prototype.toString.call(o)?e.push({node:o,path:a}):Array.isArray(o)&&o.forEach((function(t,o){n.push("".concat(a,"[").concat(o,"]")),e.push({node:t,path:"".concat(a,"[").concat(o,"]")})})),a}));n=[].concat(Object(o["a"])(n),Object(o["a"])(a))};while(e.length)r();t.selected=[s].concat(Object(o["a"])(n)),t.$nextTick((function(){var e=document.querySelector(".is-highlight");e&&e.scrollIntoView({behavior:"smooth"})}))}()}}},mounted:function(){var e=this;this.code='/**\n * Go Is The Future of JavaScript Infrastructure.\n */\n\nlet tips = [\n  "Clicking a node highlights the \\\n   corresponding location in the source code"\n];\n\nfunction Tips() {\n  return <>{tips.map((tip, i) => <div key={i}>{`Tip ${i}:` + tip}</div>)}</>;\n}\n',u["b"].on(u["a"],(function(){""===e.error&&""!==e.code&&e.compile(e.code)}))},components:{MonacoEditor:i["a"],VueJsonPretty:s.a}}}).call(this,n("c8ba"))},3846:function(e,t,n){n("9e1e")&&"g"!=/./g.flags&&n("86cc").f(RegExp.prototype,"flags",{configurable:!0,get:n("0bfb")})},"57e7":function(e,t,n){"use strict";var o=n("5ca1"),r=n("c366")(!1),i=[].indexOf,a=!!i&&1/[1].indexOf(1,-0)<0;o(o.P+o.F*(a||!n("2f21")(i)),"Array",{indexOf:function(e){return a?i.apply(this,arguments)||0:r(this,e,arguments[1])}})},"600f":function(e,t,n){"use strict";
/*!
 * nano-assign v1.0.1
 * (c) 2018-present egoist <0x142857@gmail.com>
 * Released under the MIT License.
 */var o=function(e){for(var t=arguments,n=1;n<arguments.length;n++)for(var o in arguments[n])e[o]=t[n][o];return e};e.exports=o},6058:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));n("7f7f"),n("2caf");function o(e,t,n){if(!e)return!0;if(Array.isArray(e))return e.every((function(e,r){var i="".concat(n,"[").concat(r,"]");return o(e,t,i)}));if(!1===t(e,n))return!1;switch(e.type){case"Program":return o(e.body,t,n+".body");case"Identifier":case"Literal":case"RegExpLiteral":case"EmptyStatement":case"DebuggerStatement":case"ThisExpression":case"Super":case"TemplateElementValue":case"PrivateIdentifier":break;case"ExpressionStatement":return o(e.expression,t,n+".expression");case"BlockStatement":case"StaticBlock":return o(e.body,t,n+".body");case"WithStatement":return!!o(e.expression,t,n+".expression")&&o(e.body,t,n+".body");case"ReturnStatement":return o(e.argument,t,n+".argument");case"LabeledStatement":return o(e.body,t,n+".body");case"BreakStatement":case"ContinueStatement":return o(e.label,t,n+".label");case"IfStatement":case"ConditionalExpression":return!!o(e.test,t,n+".test")&&(!!o(e.consequent,t,n+".consequent")&&o(e.alternate,t,n+".alternate"));case"SwitchStatement":return!!o(e.discriminant,t,n+".discriminant")&&o(e.cases,t,n+".cases");case"SwitchCase":return!!o(e.test,t,n+".test")&&o(e.consequent,t,n+".consequent");case"ThrowStatement":case"UnaryExpression":case"UpdateExpression":case"SpreadElement":case"YieldExpression":case"AwaitExpression":case"RestElement":return o(e.argument,t,n+".argument");case"TryStatement":return!!o(e.block,t,n+".block")&&(!!o(e.handler,t,n+".handler")&&o(e.finalizer,t,n+".finalizer"));case"CatchClause":return!!o(e.param,t,n+".param")&&o(e.body,t,n+".body");case"WhileStatement":return!!o(e.test,t,n+".test")&&o(e.body,t,n+".body");case"DoWhileStatement":return!!o(e.test,t,n+".test")&&o(e.body,t,n+".body");case"ForStatement":return!!o(e.init,t,n+".init")&&(!!o(e.test,t,n+".test")&&(!!o(e.update,t,n+".update")&&o(e.body,t,n+".body")));case"ForOfStatement":case"ForInStatement":return!!o(e.left,t,n+".left")&&(!!o(e.right,t,n+".right")&&o(e.body,t,n+".body"));case"FunctionExpression":case"FunctionDeclaration":case"ArrowFunctionExpression":return!!o(e.id,t,n+".id")&&(!!o(e.params,t,n+".params")&&o(e.body,t,n+".body"));case"VariableDeclaration":return o(e.declarations,t,n+".declarations");case"VariableDeclarator":return!!o(e.id,t,n+".id")&&o(e.init,t,n+".init");case"ArrayExpression":return o(e.elements,t,n+".elements");case"ObjectExpression":return o(e.properties,t,n+".properties");case"BinaryExpression":case"AssignmentExpression":case"LogicalExpression":case"AssignmentPattern":return!!o(e.left,t,n+".left")&&o(e.right,t,n+".right");case"MemberExpression":return!!o(e.object,t,n+".object")&&o(e.property,t,n+".property");case"CallExpression":case"NewExpression":return!!o(e.callee,t,n+".callee")&&o(e.arguments,t,n+".arguments");case"SequenceExpression":return o(e.expressions,t,n+".expressions");case"TemplateLiteral":return!!o(e.quasis,t,n+".quasis")&&o(e.expressions,t,n+".expressions");case"TaggedTemplateExpression":return!!o(e.tag,t,n+".tag")&&o(e.quasi,t,n+".quasi");case"TemplateElement":return o(e.value,t,n+".value");case"ChainExpression":return o(e.expression,t,n+".expression");case"ImportExpression":return o(e.source,t,n+".source");case"Property":case"AssignmentProperty":case"MethodDefinition":case"PropertyDefinition":return!!o(e.key,t,n+".key")&&o(e.value,t,n+".value");case"ObjectPattern":return o(e.properties,t,n+".properties");case"ArrayPattern":return o(e.elements,t,n+".elements");case"ClassBody":return o(e.body,t,n+".body");case"ClassDeclaration":case"ClassExpression":return!!o(e.id,t,n+".id")&&(!!o(e.superClass,t,n+".superClass")&&o(e.body,t,n+".body"));case"MetaProperty":return!!o(e.meta,t,n+".meta")&&o(e.property,t,n+".property");case"ImportDeclaration":return!!o(e.specifiers,t,n+".specifiers")&&o(e.source,t,n+".source");case"ImportSpecifier":return!!o(e.local,t,n+".label")&&o(e.imported,t,n+".imported");case"ImportDefaultSpecifier":case"ImportNamespaceSpecifier":return o(e.local,t,n+".local");case"ExportNamedDeclaration":return!!o(e.declaration,t,n+".declaration")&&(!!o(e.specifiers,t,n+".specifiers")&&o(e.source,t,n+".source"));case"ExportSpecifier":return!!o(e.local,t,n+".local")&&o(e.exported,t,n+".exported");case"ExportDefaultDeclaration":return o(e.declaration,t,n+".declaration");case"ExportAllDeclaration":return!!o(e.exported,t,n+".exported")&&o(e.source,t,n+".source");case"JSXElement":case"JSXFragment":return!!o(e.openingElement,t,n+".openingElement")&&(!!o(e.children,t,n+".children")&&o(e.closingElement,t,n+".closingElement"));case"JSXOpeningElement":return!!o(e.name,t,n+".name")&&o(e.attributes,t,n+".attributes");case"JSXIdentifier":return o(e.name,t,n+".name");case"JSXNamespacedName":return!!o(e.namespace,t,n+".namespace")&&o(e.name,t,n+".name");case"JSXMemberExpression":return!!o(e.object,t,n+".object")&&o(e.property,t,n+".property");case"JSXClosingElement":return o(e.name,t,n+".name");case"JSXOpeningFragment":case"JSXClosingFragment":case"JSXText":case"JSXEmptyExpression":break;case"JSXExpressionContainer":case"JSXSpreadChild":return o(e.expression,t,n+".expression");case"JSXSpreadAttribute":return o(e.argument,t,n+".argument");case"JSXAttribute":return!!o(e.name,t,n+".name")&&o(e.value,t,n+".value")}return!0}},"6b54":function(e,t,n){"use strict";n("3846");var o=n("cb7c"),r=n("0bfb"),i=n("9e1e"),a="toString",s=/./[a],c=function(e){n("2aba")(RegExp.prototype,a,e,!0)};n("79e5")((function(){return"/a/b"!=s.call({source:"a",flags:"b"})}))?c((function(){var e=o(this);return"/".concat(e.source,"/","flags"in e?e.flags:!i&&e instanceof RegExp?r.call(e):void 0)})):s.name!=a&&c((function(){return s.call(this)}))},"6d67":function(e,t,n){"use strict";var o=n("5ca1"),r=n("0a49")(1);o(o.P+o.F*!n("2f21")([].map,!0),"Array",{map:function(e){return r(this,e,arguments[1])}})},"733a":function(e,t,n){!function(t,n){e.exports=n()}(0,(function(){return function(){"use strict";var e={974:function(e,t,n){function o(e,t,n,o,r,i,a,s){var c,l="function"==typeof e?e.options:e;if(t&&(l.render=t,l.staticRenderFns=n,l._compiled=!0),o&&(l.functional=!0),i&&(l._scopeId="data-v-"+i),a?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),r&&r.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},l._ssrRegister=c):r&&(c=s?function(){r.call(this,(l.functional?this.parent:this).$root.$options.shadowRoot)}:r),c)if(l.functional){l._injectStyles=c;var u=l.render;l.render=function(e,t){return c.call(t),u(e,t)}}else{var d=l.beforeCreate;l.beforeCreate=d?[].concat(d,c):[c]}return{exports:e,options:l}}n.r(t),n.d(t,{default:function(){return u}});var r=o({props:{data:{required:!0,type:String},collapsedOnClickBrackets:Boolean},methods:{toggleBrackets(e){this.collapsedOnClickBrackets&&this.$emit("click",e)}}},(function(){var e=this,t=e.$createElement;return(e._self._c||t)("span",{staticClass:"vjs-tree__brackets",on:{click:function(t){return t.stopPropagation(),e.toggleBrackets(t)}}},[e._v("\n  "+e._s(e.data)+"\n")])}),[],!1,null,null,null).exports,i=o({props:{checked:{type:Boolean,default:!1},isMultiple:Boolean},data:()=>({focus:!1}),computed:{uiType(){return this.isMultiple?"checkbox":"radio"},model:{get(){return this.checked},set(e){this.$emit("input",e)}}}},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("label",{class:["vjs-check-controller",e.checked?"is-checked":""],on:{click:function(e){e.stopPropagation()}}},[n("span",{class:"vjs-check-controller__inner is-"+e.uiType}),e._v(" "),"checkbox"===e.uiType?n("input",{directives:[{name:"model",rawName:"v-model",value:e.model,expression:"model"}],class:"vjs-check-controller__original is-"+e.uiType,attrs:{type:"checkbox"},domProps:{checked:Array.isArray(e.model)?e._i(e.model,null)>-1:e.model},on:{change:[function(t){var n=e.model,o=t.target,r=!!o.checked;if(Array.isArray(n)){var i=e._i(n,null);o.checked?i<0&&(e.model=n.concat([null])):i>-1&&(e.model=n.slice(0,i).concat(n.slice(i+1)))}else e.model=r},function(t){return e.$emit("change",e.model)}],focus:function(t){e.focus=!0},blur:function(t){e.focus=!1}}}):"radio"===e.uiType?n("input",{directives:[{name:"model",rawName:"v-model",value:e.model,expression:"model"}],class:"vjs-check-controller__original is-"+e.uiType,attrs:{type:"radio"},domProps:{checked:e._q(e.model,null)},on:{change:[function(t){e.model=null},function(t){return e.$emit("change",e.model)}],focus:function(t){e.focus=!0},blur:function(t){e.focus=!1}}}):n("input",{directives:[{name:"model",rawName:"v-model",value:e.model,expression:"model"}],class:"vjs-check-controller__original is-"+e.uiType,attrs:{type:e.uiType},domProps:{value:e.model},on:{change:function(t){return e.$emit("change",e.model)},focus:function(t){e.focus=!0},blur:function(t){e.focus=!1},input:function(t){t.target.composing||(e.model=t.target.value)}}})])}),[],!1,null,null,null);function a(e){return Object.prototype.toString.call(e).slice(8,-1).toLowerCase()}function s(e,t="root",n=0,{key:o,index:r,type:i="content",showComma:c=!1,length:l=1}={}){const u=a(e);if("array"===u){const r=e.map((e,o,r)=>s(e,`${t}[${o}]`,n+1,{index:o,showComma:o!==r.length-1,length:l,type:i})).reduce((e,t)=>e.concat(t),[]);return[s("[",t,n,{key:o,length:e.length,type:"arrayStart"})[0]].concat(r,s("]",t,n,{showComma:c,length:e.length,type:"arrayEnd"})[0])}if("object"===u){const a=Object.keys(e),u=a.map((o,r,a)=>s(e[o],o.includes(".")?`${t}["${o}"]`:`${t}.${o}`,n+1,{key:o,showComma:r!==a.length-1,length:l,type:i})).reduce((e,t)=>e.concat(t),[]);return[s("{",t,n,{key:o,index:r,length:a.length,type:"objectStart"})[0]].concat(u,s("}",t,n,{showComma:c,length:a.length,type:"objectEnd"})[0])}const d=Object.entries({content:e,level:n,key:o,index:r,path:t,showComma:c,length:l,type:i}).reduce((e,[t,n])=>void 0!==n?{...e,[t]:n}:e,{});return"object"===a(d)?[d]:d}var c=o({components:{Brackets:r,CheckController:i.exports},props:{node:{required:!0,type:Object},collapsed:Boolean,collapsedOnClickBrackets:Boolean,showDoubleQuotes:Boolean,showLength:Boolean,checked:Boolean,selectableType:{type:String,default:""},showSelectController:{type:Boolean,default:!1},showLine:{type:Boolean,default:!0},selectOnClickNode:{type:Boolean,default:!0},pathSelectable:{type:Function,default:()=>!0},highlightSelectedNode:{type:Boolean,default:!0},customValueFormatter:{type:Function,default:null}},computed:{valueClass(){return"vjs-value vjs-value__"+this.dataType},dataType(){return a(this.node.content)},prettyKey(){return this.showDoubleQuotes?`"${this.node.key}"`:this.node.key},selectable(){return this.pathSelectable(this.node.path,this.node.content)&&(this.isMultiple||this.isSingle)},isMultiple(){return"multiple"===this.selectableType},isSingle(){return"single"===this.selectableType}},methods:{defaultFormatter(e){let t=e+"";return"string"===this.dataType&&(t=`"${t}"`),t},valueFormatter(e){const t=this.customValueFormatter?this.customValueFormatter(e,this.node.key,this.node.path,this.defaultFormatter(e)):this.defaultFormatter(e);return this.node.showComma?t+",":t},onBracketsClick(){this.$emit("brackets-click",!this.collapsed,this.node.path)},onCheckedChange(){this.$emit("selected-change",this.node)},onTreeNodeClick(){this.$emit("tree-node-click",this.node),this.selectable&&this.selectOnClickNode&&this.$emit("selected-change",this.node)}}},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{class:{"vjs-tree__node":!0,"has-selector":e.showSelectController,"is-highlight":e.highlightSelectedNode&&e.checked},on:{click:e.onTreeNodeClick}},[e.showSelectController&&e.selectable&&"objectEnd"!==e.node.type&&"arrayEnd"!==e.node.type?[n("check-controller",{attrs:{"is-multiple":e.isMultiple,checked:e.checked},on:{change:e.onCheckedChange}})]:e._e(),e._v(" "),e._l(e.node.level,(function(t,o){return n("div",{key:o,class:{"vjs-tree__indent":!0,"has-line":e.showLine}})})),e._v(" "),e.node.key?n("span",{staticClass:"vjs-key"},[e._v(e._s(e.prettyKey)+":")]):e._e(),e._v(" "),n("span",["content"!==e.node.type?n("brackets",{attrs:{data:e.node.content,"collapsed-on-click-brackets":e.collapsedOnClickBrackets},on:{click:e.onBracketsClick}}):n("span",{class:e.valueClass,domProps:{innerHTML:e._s(e.valueFormatter(e.node.content))}}),e._v(" "),e.showLength&&e.collapsed?n("span",{staticClass:"vjs-comment"},[e._v(" // "+e._s(e.node.length)+" items ")]):e._e()],1)],2)}),[],!1,null,null,null),l=o({name:"VueJsonPretty",components:{TreeNode:c.exports},props:{data:{type:[String,Number,Boolean,Array,Object],default:null},deep:{type:Number,default:1/0},collapsePath:{type:RegExp,default:null},path:{type:String,default:"root"},virtual:{type:Boolean,default:!1},itemHeight:{type:Number,default:20},showLength:{type:Boolean,default:!1},showDoubleQuotes:{type:Boolean,default:!0},selectableType:{type:String,default:""},showSelectController:{type:Boolean,default:!1},showLine:{type:Boolean,default:!0},selectOnClickNode:{type:Boolean,default:!0},value:{type:[Array,String],default:()=>""},pathSelectable:{type:Function,default:()=>!0},highlightSelectedNode:{type:Boolean,default:!0},collapsedOnClickBrackets:{type:Boolean,default:!0},customValueFormatter:{type:Function,default:null}},data(){return{translateY:0,visibleData:null,hiddenPaths:s(this.data,this.path).reduce((e,t)=>"objectStart"!==t.type&&"arrayStart"!==t.type||!(t.level===this.deep||this.collapsePath&&this.collapsePath.test(t.path))?e:{...e,[t.path]:1},{})}},computed:{flatData(){let e=null;return s(this.data,this.path).reduce((t,n,o)=>{const r={...n,id:o},i=this.hiddenPaths[r.path];if(e&&e.path===r.path){const n="objectStart"===e.type,o={...e,...r,content:n?"{...}":"[...]",type:n?"objectCollapsed":"arrayCollapsed"};return e=null,t.concat(o)}return i&&!e?(e=r,t):e?t:t.concat(r)},[])},selectedPaths:{get(){return this.value&&"single"===this.selectableType?[this.value]:this.value||[]},set(e){this.$emit("input",e)}},propsError(){return!this.selectableType||this.selectOnClickNode||this.showSelectController?"":"When selectableType is not null, selectOnClickNode and showSelectController cannot be false at the same time, because this will cause the selection to fail."}},watch:{propsError:{handler(e){if(e)throw new Error("[VueJsonPretty] "+e)},immediate:!0},flatData:{handler(){this.onTreeScroll()},immediate:!0}},methods:{onTreeScroll(){if(this.virtual){const e=10,t=this.$refs.tree&&this.$refs.tree.scrollTop||0,n=Math.floor(t/this.itemHeight);let o=n<0?0:n+e>this.flatData.length?this.flatData.length-e:n;o<0&&(o=0);const r=o+e;this.translateY=o*this.itemHeight,this.visibleData=this.flatData.filter((e,t)=>t>=o&&t<r)}else this.visibleData=this.flatData},onSelectedChange({path:e}){const t=this.selectableType;if("multiple"===t){const t=this.selectedPaths.findIndex(t=>t===e),n=[...this.selectedPaths];-1!==t?this.selectedPaths.splice(t,1):this.selectedPaths.push(e),this.$emit("change",this.selectedPaths,n)}else if("single"===t&&this.selectedPaths!==e){const t=this.selectedPaths,n=e;this.selectedPaths=n,this.$emit("change",n,t)}},onTreeNodeClick({content:e,path:t}){this.$emit("click",t,e)},onBracketsClick(e,t){if(e)this.hiddenPaths={...this.hiddenPaths,[t]:1};else{const e={...this.hiddenPaths};delete e[t],this.hiddenPaths=e}}}},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{ref:"tree",class:{"vjs-tree":!0,"is-virtual":e.virtual},on:{scroll:e.onTreeScroll}},[n("div",{style:e.virtual&&{height:e.flatData.length*e.itemHeight+"px"}},[n("div",{style:e.virtual&&{transform:"translateY("+e.translateY+"px)"}},e._l(e.visibleData,(function(t){return n("tree-node",{key:t.id,attrs:{node:t,collapsed:!!e.hiddenPaths[t.path],"custom-value-formatter":e.customValueFormatter,"show-double-quotes":e.showDoubleQuotes,"show-length":e.showLength,"collapsed-on-click-brackets":e.collapsedOnClickBrackets,checked:e.selectedPaths.includes(t.path),"selectable-type":e.selectableType,"show-line":e.showLine,"show-select-controller":e.showSelectController,"select-on-click-node":e.selectOnClickNode,"path-selectable":e.pathSelectable,"highlight-selected-node":e.highlightSelectedNode},on:{"tree-node-click":e.onTreeNodeClick,"brackets-click":e.onBracketsClick,"selected-change":e.onSelectedChange}})})),1)])])}),[],!1,null,null,null).exports,u=Object.assign({},l,{version:"1.8.1"})}},t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={exports:{}};return e[o](r,r.exports,n),r.exports}return n.d=function(e,t){for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(974)}()}))},"75fc":function(e,t,n){"use strict";n.d(t,"a",(function(){return y}));var o=n("a745"),r=n.n(o),i=n("db2a");function a(e){if(r()(e))return Object(i["a"])(e)}var s=n("67bb"),c=n.n(s),l=n("5d58"),u=n.n(l),d=n("774e"),h=n.n(d);function p(e){if("undefined"!==typeof c.a&&null!=e[u.a]||null!=e["@@iterator"])return h()(e)}var f=n("e630");function m(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function y(e){return a(e)||p(e)||Object(f["a"])(e)||m()}},"7f7f":function(e,t,n){var o=n("86cc").f,r=Function.prototype,i=/^\s*function ([^ (]*)/,a="name";a in r||n("9e1e")&&o(r,a,{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})},"87b3":function(e,t,n){var o=Date.prototype,r="Invalid Date",i="toString",a=o[i],s=o.getTime;new Date(NaN)+""!=r&&n("2aba")(o,i,(function(){var e=s.call(this);return e===e?a.call(this):r}))},9042:function(e,t,n){"use strict";n("f3c4")},ad5f:function(e,t,n){"use strict";n.r(t);var o=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"two-split",attrs:{id:"ast"}},[n("monaco-editor",{ref:"editor",staticClass:"editor",attrs:{language:"javascript",amdRequire:e.amdRequire,options:e.editorCfg},on:{editorDidMount:e.editorDidMount},model:{value:e.code,callback:function(t){e.code=t},expression:"code"}}),!e.error&&e.ast?n("vue-json-pretty",{staticClass:"json-viewer",attrs:{data:e.ast,"collapse-path":e.collapsePath,showLength:"",showLine:"","selectable-type":"multiple",value:e.selected},on:{click:e.handleAstClick}}):e._e(),!e.error&&e.ast?n("div",{staticClass:"copy",on:{click:e.copy}},[e._v("copy")]):e._e(),e.error?n("div",{staticClass:"error"},[n("div",[e._v(e._s(e.error))]),e._m(0)]):e._e()],1)},r=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"issue"},[e._v("\n      Looks like a bug? Help to improve mole by firing an\n      "),n("a",{attrs:{href:"https://github.com/hsiaosiyuan0/mole/issues",target:"_blank"}},[e._v("Issue")]),e._v("\n      :)\n    ")])}],i=n("3704"),a=i["a"],s=(n("9042"),n("2877")),c=Object(s["a"])(a,o,r,!1,null,null,null);t["default"]=c.exports},c832:function(e,t,n){(function(t){var n="Expected a function",o="__lodash_hash_undefined__",r=1/0,i="[object Function]",a="[object GeneratorFunction]",s="[object Symbol]",c=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,l=/^\w*$/,u=/^\./,d=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,h=/[\\^$.*+?()[\]{}|]/g,p=/\\(\\)?/g,f=/^\[object .+?Constructor\]$/,m="object"==typeof t&&t&&t.Object===Object&&t,y="object"==typeof self&&self&&self.Object===Object&&self,g=m||y||Function("return this")();function v(e,t){return null==e?void 0:e[t]}function b(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(n){}return t}var _=Array.prototype,k=Function.prototype,S=Object.prototype,C=g["__core-js_shared__"],x=function(){var e=/[^.]+$/.exec(C&&C.keys&&C.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),w=k.toString,E=S.hasOwnProperty,$=S.toString,j=RegExp("^"+w.call(E).replace(h,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),D=g.Symbol,O=_.splice,T=ie(g,"Map"),P=ie(Object,"create"),B=D?D.prototype:void 0,M=B?B.toString:void 0;function F(e){var t=-1,n=e?e.length:0;this.clear();while(++t<n){var o=e[t];this.set(o[0],o[1])}}function N(){this.__data__=P?P(null):{}}function A(e){return this.has(e)&&delete this.__data__[e]}function L(e){var t=this.__data__;if(P){var n=t[e];return n===o?void 0:n}return E.call(t,e)?t[e]:void 0}function J(e){var t=this.__data__;return P?void 0!==t[e]:E.call(t,e)}function R(e,t){var n=this.__data__;return n[e]=P&&void 0===t?o:t,this}function q(e){var t=-1,n=e?e.length:0;this.clear();while(++t<n){var o=e[t];this.set(o[0],o[1])}}function I(){this.__data__=[]}function V(e){var t=this.__data__,n=Z(t,e);if(n<0)return!1;var o=t.length-1;return n==o?t.pop():O.call(t,n,1),!0}function X(e){var t=this.__data__,n=Z(t,e);return n<0?void 0:t[n][1]}function U(e){return Z(this.__data__,e)>-1}function W(e,t){var n=this.__data__,o=Z(n,e);return o<0?n.push([e,t]):n[o][1]=t,this}function H(e){var t=-1,n=e?e.length:0;this.clear();while(++t<n){var o=e[t];this.set(o[0],o[1])}}function Y(){this.__data__={hash:new F,map:new(T||q),string:new F}}function K(e){return re(this,e)["delete"](e)}function Q(e){return re(this,e).get(e)}function z(e){return re(this,e).has(e)}function G(e,t){return re(this,e).set(e,t),this}function Z(e,t){var n=e.length;while(n--)if(pe(e[n][0],t))return n;return-1}function ee(e,t){t=ae(t,e)?[t]:oe(t);var n=0,o=t.length;while(null!=e&&n<o)e=e[ue(t[n++])];return n&&n==o?e:void 0}function te(e){if(!ye(e)||ce(e))return!1;var t=me(e)||b(e)?j:f;return t.test(de(e))}function ne(e){if("string"==typeof e)return e;if(ve(e))return M?M.call(e):"";var t=e+"";return"0"==t&&1/e==-r?"-0":t}function oe(e){return fe(e)?e:le(e)}function re(e,t){var n=e.__data__;return se(t)?n["string"==typeof t?"string":"hash"]:n.map}function ie(e,t){var n=v(e,t);return te(n)?n:void 0}function ae(e,t){if(fe(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!ve(e))||(l.test(e)||!c.test(e)||null!=t&&e in Object(t))}function se(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}function ce(e){return!!x&&x in e}F.prototype.clear=N,F.prototype["delete"]=A,F.prototype.get=L,F.prototype.has=J,F.prototype.set=R,q.prototype.clear=I,q.prototype["delete"]=V,q.prototype.get=X,q.prototype.has=U,q.prototype.set=W,H.prototype.clear=Y,H.prototype["delete"]=K,H.prototype.get=Q,H.prototype.has=z,H.prototype.set=G;var le=he((function(e){e=be(e);var t=[];return u.test(e)&&t.push(""),e.replace(d,(function(e,n,o,r){t.push(o?r.replace(p,"$1"):n||e)})),t}));function ue(e){if("string"==typeof e||ve(e))return e;var t=e+"";return"0"==t&&1/e==-r?"-0":t}function de(e){if(null!=e){try{return w.call(e)}catch(t){}try{return e+""}catch(t){}}return""}function he(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new TypeError(n);var o=function(){var n=arguments,r=t?t.apply(this,n):n[0],i=o.cache;if(i.has(r))return i.get(r);var a=e.apply(this,n);return o.cache=i.set(r,a),a};return o.cache=new(he.Cache||H),o}function pe(e,t){return e===t||e!==e&&t!==t}he.Cache=H;var fe=Array.isArray;function me(e){var t=ye(e)?$.call(e):"";return t==i||t==a}function ye(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function ge(e){return!!e&&"object"==typeof e}function ve(e){return"symbol"==typeof e||ge(e)&&$.call(e)==s}function be(e){return null==e?"":ne(e)}function _e(e,t,n){var o=null==e?void 0:ee(e,t);return void 0===o?n:o}e.exports=_e}).call(this,n("c8ba"))},e6c2:function(e,t,n){},f3c4:function(e,t,n){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,